# Secrets based data exchange to scale PACT globally
Date: 2023-10-30

## Status
Proposed

## Executive summary
This document proposes a solution to address the barriers and difficulties in adopting PACT globally due to the current OAuth implementation. The proposal suggests a secrets-based data exchange protocol that would simplify the authentication process and enable easier adoption of PACT. The solution involves requesting data using a secret, sending encrypted data with the secret, and decrypting the received data using the secret. This protocols would reduce investments and barriers to entry, making it easier for companies to participate in PACT.

## Intro
The current OAuth implementation has a couple of fundamental issues that make it quite difficult for companies to adopt PACT, and for PACT to scale as the global standard.
This proposal suggests another method of authentication that would take away these barriers and make sure PACT is adopted more easily globally.

## Problem definition
To explain the issues with OAuth lets's walk through a scenario;

### Scenario: Requesting data from 30.000 suppliers using OAuth
Assume that these 30.000 suppliers use around 100 different reporting tools, this means...

_Data Recipient_
For each reporting tool:
- create an account in that tool to manage OAuth id/secrets
- invite team members to handle these secrets, setup an internal processes for handling these secrets
- build, test and maintain the OAuth integration (including managing secrets, a worker for refreshing access tokens, error states)

This results in a time investment of
+ ~1 week per PACT provider
x 100 tools
+ managing 100s of accounts and integrations at different tools
= barrier to enter to do PACT at scale

_Data Owner_
- build, test and maintain an OAuth api (including required checks on expiring tokens and token refresh mechanisms)
- build, test and maintain a (multi) user account management system to support oAuth users
- support 1000s of users that are not core business

This results in a time investment of
+ weeks OAuth integration
+ weeks to create OAuth user management
+ continious supporting thousands of users
= barrier to enter and do PACT at scale

As one can see the investments needed to join PACT creates a high barrier to enter caused by the decision to use OAuth for authentication. To achieve global scale, it's important for PACT that technology is an enabler and not creating barriers.

OAuth depends on having accounts in both solutions / both sides of the protocol, and connecting the two and exchange data. But that means that working with PACT results in a lot of users that are not core business. Not to mention that it's questionable that companies will want to create accounts everywhere.

![OAuth based data exchage](./images/0025-Oauth-based-data-exchange.png)

Another problem with OAuth is that it's a rather complex protocol as can be seen from the schematics. There are a lot of implementation details, which means A) there's a lot of overhead implementing all these details and B) a lot of things can go wrong that need to be tackled correctly.

So lets take a step back and start with some user stories

## User stories
Assuming the following user stories would result in global adoption of PACT

- As a Data Recipient I want to be able to retreive PACT data at scale from my thousands of suppliers
- As a Data Recipient I want to be able to automate the flow of requesting PACT data
- As a Data Recipient I don’t want to make big investments in setting up PACT
<br/><br/>
- As a Data Owner I do not want to give data requesting parties accounts or access to my application, as those parties are not my concern but my customers’ concern.
- As a Data Owner I do not want to make big investments in setting up PACT

Furthermore there are multiple trust issues to solve
- Both parties want to be assured that they can validate incoming requests
- Both parties want to communicate securely

The following solution is proposed;

## Secrets based authentication
![Secrets based authentication](./images/0025-registry-based-authentication.png)

This solution assumes
- there are 2 companies with an existing relation, Company A and Company B
- using 2 different PACT compliant software platforms, Platform Tree and Platform Sky
- and they want to exchange data 

This solution only solves for the trust relation between the 2 PACT compliant software solutions, and not for the trust relation between these 2 companies (it's very questionable this can be solved technologically, and neither does OAuth). 

In other words the foundation of this solution is that company A talks to company B, and they tell each other which PACT software solution they're using (perhaps as stated on the invoices, or recorded in these software platforms)

![Registry based authentication (RBA)](./images/0025-secrets-based-data-exchange.png)

_**Step 1 - PACT Compliance registration**_<br/>
All PACT participanys create an assymetric `private`/`public` keypair. The `public key` is added to the PACT compliance registration, and included in the PACT registry. This registry then acts as a form of DNS, where other participant can look up PACT `provider<>public key` pairs.

_**Step 2 - PACT endpoints**_<br/>
Participating parties setup generic PACT endpoints for requesting and receiving data:
`pact.[domain.com]/request` and `pact.[domain.com]/receive`. This enables making those request at scale.

_**Step 3 - Request data**_<br/>
The Data Recipient requests data from a Data Owner by sending a generic PACT payload to `pact.[domain.com]/request`. The payload is hashed and the hash is encrypted with the private key of the Data Recipient and added as a signature to the payload.

_**Step 3 - Validate request**_<br/>
The Data Owner receives the request and uses the origin domain to query the PACT registry for the public key of the Data Recipient. The Data Owner then decrypts the signature using the public key, resulting in the hash of the payload as created by the Data Recipient.

Next, the Data Owner also calculates the hash of the payload and validates it matches with the received hash. If the hashes are matching, the request is valid, and the Data Owner can be assured the request comes from the Data Recipient.

_**Step 4 - Approval & collection of data**_<br/>
Approval isn't part of the protocol, nor did OAuth solve this. But at this stage an approval happens explicitely or implicitely, which results in the decision to agree on the data request.

_**Step 5 - Send data**_<br/>
The Data Owner sends the data back to `pact.[domain.com]/receive` using a generic PACT payload. Again the payload is hashed and the hash is encrypted with the private key of the Data Owner and added as a signature to the payload.

_**Step 6 - Receive data**_<br/>
Again the Data Owner uses the origin domain of the incoming request to query the PACT registry for the public key of the Data Owner. The Data Recipient then decrypts the signature using the public key, resulting in the hash of the payload as created by the Data Owner.

Next, the Data Recipient also calculates the hash of the payload and validates it matches with the received hash. If the hashes are matching, the request is valid, and the Data Owner can be assured the request comes from the Data Owner.

---
With this simple exchange protocol companies can automate data requests and make those requests at scale, without making much investments. The protocol solves the trust issues; parties can validate incoming requests, and security is furthermore provided https. Besides this protocal doesn't require supporting OAuth accounts and users, nor client/secret management at scale.

Another advantage of this protocol is that it's very simple. There isn't a lot that can go wrong, which means handling errors and edge cases correctly is less of an investment compared to OAuth.

## Investments
So lets look again at the time investments for both parties

_Data Recipient_
- setup a `pact` subdomain with a `/receive` endpoint
- generate public-private keypair, store private key in a secrets manager
- request and receive data in an automated way
- validate incoming requests

This results in a time investment of
- couple of days to setup a pact subdomain
- couple of hours to create and handle keypair
- couple of days to validate incoming requests
Note that there's no need to multiply this by anymore by 100s of PACT solutions; it's a 1 time thing that works for everyone.

_Data Owner_
- setup a `pact` subdomain with a request endpoint
- generate public-private keypairs, store private key in a secrets manager
- optional; build approval flows
- send data
- validate incoming requests

This results in a time investment of
- couple of days to setup a pact subdomain
- couple of hours to create and handle keypair
- couple of days to validate incoming requests

## Other advantages
Another advantages of this solution is that adoption doesn't need to disrupt the currently developed OAuth implementations, and both implementations could coexist. The PACT compliance registry already exists, and by simply asking PACT participants to generate and add their public keys to the registry, they can start supporting and using a much simpler data exchange protocol.

## Conclusion
Dropping OAuth for a secret based authentication protocol will massively reduce investments and barrier to enter to participate in PACT. Secrets based authentication is much simpler, resulting in faster and cheaper implementation, and fewer edge cases that need to be tackled.

## Next steps
This proposal is mostly to poll interest of the group to work towards an alternative authentication protocol in order to help PACT become a global standard and success. If there's enough interest, the next step is to extend the proposal with more technical details. There are details to solve for such as a party's private key being leaked
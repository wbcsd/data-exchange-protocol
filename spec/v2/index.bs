<pre class='metadata'>
Title: Technical Specifications for PCF Data Exchange
Text Macro: VERSION 2.2.1-20240513
Shortname: data-exchange-protocol
Level: 1
Status: LD
Mailing List: public-dev@pathfinder.sine.dev
Editor: Martin Pompéry (SINE Foundation), https://sine.foundation, martin@sine.foundation
Editor: Cecilia Valeri (WBCSD), https://www.wbcsd.org, valeri@wbcsd.org
Abstract: This document specifies a data model for GHG emission data at product level based on the Pathfinder Framework Version 2, and a protocol for interoperable exchange of GHG emission data at product level.
Markup Shorthands: markdown yes, idl yes, dfn yes
Boilerplate: omit copyright, omit conformance
Local Boilerplate: header yes
Local Boilerplate: computed-metadata yes
Metadata Include: This version off
</pre>

# Introduction # {#intro}

Advisement: This document is a work in progress and should not be used for conformance testing.
  Please refer to the [latest stable version of the Technical Specifications]([LATEST]) for conformance testing.
  All feedback is welcome.

This document contains the necessary technical foundation for the [=Pathfinder Network=], an open and global network for emission data exchange.

The goal of this document is to enable the [=interoperable=] exchange of [=PCF|Product Carbon Footprints=] across [[#conformance|conforming]] [=host systems=].

The methodological foundation of the specification is the Pathfinder Framework Version 2.0 ([[!PATHFINDER-FRAMEWORK]]).

## Status of This Document ## {#status}

Comments regarding this document are welcome. Please file issues directly on [GitHub](https://github.com/wbcsd/data-exchange-protocol/), or send them to [public-dev@pathfinder.sine.dev](mailto:public-dev@pathfinder.sine.dev).

This document was published by [Partnership for Carbon Transparency (PACT)](https://www.carbon-transparency.com/) after an update to the [[!PATHFINDER-FRAMEWORK|Pathfinder Framework]]) was made.

The technical specifications within this document are the result of consent processes by PACT members and the WBCSD.

PACT recommends the wide deployment of this specification.


## Scope ## {#scope}

The scope of this document is to reach interoperability for product-level GHG emission data exchange through the definition of a data model ([[#data-model]]) based on the [=Pathfinder Framework=] Version 2.0 and the definition of a HTTP REST API ([[#api]]).


## Intended Audience ## {#audience}

This technical specification is for

- software developers who want to build software for the exchange of product footprints according to the [=Pathfinder Framework=];
- auditors and sustainability experts who want to understand the data semantics of product footprints or how they are exchanged between partners; and
- anyone that wants to understand more about the technological foundations of the Pathfinder Network.


## About PACT and the Pathfinder Network ## {#about-pact}

The Pathfinder Network is a concept developed by PACT and powered by the World Business Council for Sustainable Development (WBCSD). PACT is working toward the vision of an open and global network of interoperable solutions for the secure peer-to-peer exchange of accurate, primary and verified product emissions data – across all industries and value chains.

For further information, please refer to the [PACT website](https://www.carbon-transparency.com) and the [Pathfinder Network Vision Paper](https://wbcsd.sharepoint.com/:b:/s/ClimateEnergy/EXuphu_V4FZHqG1R8sr1mz8B5bo6bhhF0DBHnWDQq-_vCQ?e=Tae0eR).


## Disclaimer ## {#disclaimer}

While PACT encourages the implementation of the technical specifications by all entities to start creating a harmonized system, neither PACT, WBCSD, nor any other individuals who contributed to the development of this document assume responsibility for any consequences or damages resulting directly or indirectly from the use of this document.


## Acknowledgements ## {#acknowledgements}

WBCSD would like to thank all PACT members, WBCSD staff, and others who shared their detailed and thoughtful input and contributed actively to the development of this document.

WBCSD would also like to express special thanks to the companies participating in the pilot for testing the [=interoperable=] exchange of GHG emissions data across different solutions, as well as to those [=Solution Providers=] who have contributed to this document.


## License ## {#section-license}

The license can be found in [[#license]].


# Terminology # {#terminology}

: <dfn>Data Model Extension</dfn>
::
    A data model extension is a set of definitions that extends the data model of this document.

    The encoding of a data model extension in the data model is specified in [[#dt-datamodelextension]].

    See [[!DATA-MODEL-EXTENSIONS]] and [[!EXTENSIONS-GUIDANCE]] for further details.

: <dfn>Data recipient</dfn>
:: The [=SCA|Supply Chain Actor=] requesting and/or receiving [=PCF=] data from another [=SCA=].

: <dfn>Data owner</dfn>
:: The Supply Chain Actor (SCA) exchanging PCF data with another SCA.

: <dfn>interoperable</dfn>
:: The quality of being able to exchange data between [=host systems=] irrespective of the vendors of the host systems, without the need for translation or transformation of the data.

: Greenhouse Gas (emissions) (<dfn>GHG</dfn>)
:: Gaseous constituents of the atmosphere, both natural and anthropogenic, that absorb and emit radiation at specific wavelengths within the spectrum of infrared radiation emitted by the Earth’s surface, its atmosphere and clouds. GHGs include CDCO₂, Methane (CH4), Nitrous Oxide(N₂O), Hydrofluoro-Carbons (HFCs), Perfluorocarbons (PFCs) and Sulfur Hexafluoride (SF6).

: <dfn>OpenId Provider Configuration Document</dfn>
:: A `OpenId Provider Configuration Document` document provided in accordance with [[!OPENID-CONNECT]] Section 4

: Partnership for Carbon Transparency (<dfn>PACT</dfn>)
:: A WBCSD-led group of companies and organizations working together to develop a global and open network for the secure peer-to-peer exchange of accurate, primary and verified product emissions data. See [www.carbon-transparency.com](www.carbon-transparency.com) for more information.

: Pathfinder Framework Version 2.0 (<dfn>Pathfinder Framework</dfn>)
:: Guidance for the Accounting and Exchange of Product Life Cycle Emissions,
    building on existing standards and protocols, such as the GHG Protocol
    Product standard. See [[!PATHFINDER-FRAMEWORK]] for further details.

: <dfn>Pathfinder Network</dfn>
:: An information network of and for supply chain actors to securely exchange environmental data with each other, with an initial focus on PCF data.

: Product Carbon Footprint (<dfn>PCF</dfn>)
:: The carbon (equivalent) emissions relating to a product. Products can be any kind of item exchanged between entities, including metric or volumetric quantities of a product.
     The <{ProductFootprint}> data model is a digital representation of a PCF in accordance with the [=Pathfinder Framework=].

: Supply Chain Actor (<dfn>SCA</dfn>)
:: An entity intending on exchanging PCF data with another entity using the technical means specified in this document.

: <dfn>Solution Provider</dfn>
:: An entity providing technical solutions to SCAs by implementing and offering [=host systems=].

: <dfn>UN geographic region</dfn>, <dfn>UN geographic subregion</dfn>
:: See [https://unstats.un.org/unsd/methodology/m49/](https://unstats.un.org/unsd/methodology/m49/) for details.




# Conformance # {#conformance}

As well as sections marked as non-normative, all authoring guidelines, diagrams, examples, and notes in this specification are non-normative. Everything else in this specification is normative.

The key words MAY, MUST, MUST NOT, OPTIONAL, RECOMMENDED, REQUIRED, SHOULD, and SHOULD NOT in this document are to be interpreted as described in [[!RFC2119]] [[!RFC8174]] when, and only when, they appear in all capitals, as shown here.

A conforming [=host system=] is any algorithm realized as software and/or hardware that complies with the relevant normative statements in [[#api]].

A conforming requesting [=data recipient=] is any algorithm realized as software and/or hardware that complies with the relevant normative statements in [[#api]].


# Guidance and Business Cases # {#business-cases}

Note: This chapter is non-normative.

Due to the complexity and nature of global supply chains, achieving transparency in carbon emissions at the product level is a challenging task.
As the [[!PATHFINDER-FRAMEWORK|Pathfinder Framework Version 2.0]] provides the methodological foundations for calculating product carbon footprints (PCFs),
this specification focuses on enabling transparency through a peer-to-peer PCF data exchange by specifying necessary aspects for achieving interoperability, such as the [[#data-model|data model]] and [[#api|API]].

However, these two aspects can be combined in various ways to achieve different business objectives.

This chapter serves as a guidance to the technical specifications in general by providing examples for inter-company business cases related to the exchange of [=PCFs=].
The different business cases are explained in a structured way, with business objectives presented through the lenses of interoperable data exchange processes enabled by the
different aspects of this specification.

For now, this chapter focuses on asynchronous event processing. It will be expanded with additional business cases over time.


## Asynchronous Event Processing ## {#business-cases-async-events}

### The General Principles of Event Processing ### {#business-cases-async-events-principles}

1. A host system should strive to accept an event unless for the following reasons
    1. event processing is not support by the host system
    2. the syntax in the event is not supported (e.g. when the event failed “syntax checks” of the request host system)
2. Whenever a host system's `Event` endpoint returns an error response, no follow up response event (or error event) will be sent back to the original requester
3. The requested host system will attempt to always send a response event to the requesting host
    system, **but the requesting host system should not rely on this behavior and retry after an
    appropriate amount of time by sending another new request event.**

### Business Case 1: Requesting Product Footprints ### {#business-cases-async-events-1}

#### Context and Assumptions #### {#business-cases-async-events-1-context}

- This business case is triggered by a data recipient if they wish to access a Product Footprint <strong>they could not yet access through the `ListFootprints` API</strong>.
- The data recipient and data owner have a mutually agreed upon way to identify products.

#### Workflow #### {#business-cases-async-events-1-workflow}

1. The data recipient sends a `ProductFootprintFragment`  to the `Events Endpoint` of the data owner. The data recipient should always include 1 or more product ids in property `productIds`. The data recipient should limit each fragment to exactly 1 specific product (e.g. a specific type of apple instead of all apples that somebody is offering)
    1. If the recipient is requesting a specific reporting period, it should include the reporting
        period accordingly
        <div class="example">
          ```json
          {
            "productIds": ["urn:pathfinder:company:customcode:buyer-assigned:4321"],
            "referencePeriodStart": "2023-01-01T00:00:00Z",
            "referencePeriodEnd": "2024-01-01T00:00:00Z"
          }
          ```
        </div>
    2. If the recipient is requesting a specific geography, it should include the geographic scope accordingly
        <div class="example">
          ```json
          {
            "productIds": ["urn:pathfinder:company:customcode:buyer-assigned:4321"],
            "geographyCountry": "FR"
          }
          ```
        </div>
    3. If the recipient has another need that is not covered above, the data recipient should
        express it as clearly as possible to the best of their ability and following the syntactic
        rules of the data model
        1. Note: it is possible that this request will not be commonly understood by the data owner's host system

#### Cases #### {#business-cases-async-events-1-cases}

- Case 0: The solution does not support this kind of processing
    - Either because the event processing does not exit at all, or the product footprint fragment as it is submitted by the data recipient is not supported by the requested host system
    - The `events` endpoint responds with HTTP error code `400` and with a body with error code `NotImplemented`
- Case 1: A PCF does not exist (yet) or a partially matching PCF exists
    - Accept the event (HTTP Code 200 returned by the events endpoint)
    - In case of a partial match, the data owner needs to decide whether to calculate the PCF(s) or not.
        - Note: the decision making and decision making protocol for this case is up to the discretion of each data owner
    - In case the data owner decided or needs to calculate the PCF and the calculation succeeded,
        - the host system makes the newly calculated footprints also available to the data recipient through `ListFootprints`
        - the host system of the data owner sends back the 1 or more product footprints in a single event to the data requester
    - In case the data owner decided to not make additional PCFs available
        - the host system responds listing the (partially) matching PCFs
    - If the product cannot be found or otherwise identified through the product footprint fragment
        - the host system of the data owner responds with a PF Response Error Event with code `NoSuchFootprint`
    - If the PCF calculation failed for other reasons
        - the host system SHOULD send **`PF Response Error Event`** with error code `InternalError`
- Case 2: The PCF(s) exists
    - The host system accepts the event (Code 200)
    - If the data recipient does not have access to the PCF yet
        - the data owner decides on making the PCF available or not
        - if the data owner made the matching PCF(s) available, their host system returns the PCFs to the data recipient
        - otherwise, the host system of the data owner responds with a error event with error code `AccessDenied`
    - If the data recipient has access to the PCF(s)
        - the data owner responds by sending
- Default / Backup Case:
    - The host systems accepts the event (Code 200)
    - The host system sends back a `PF Response Error Event` with code `BadRequest`


# Data Model # {#data-model}

This section specifies a data model for [[#dt-pf|product footprints]] conforming
with the [=Pathfinder Framework=] Version 2.

The data model consists of the following major data types:

1. <{ProductFootprint}>: contains information to identify a product,
    plus further information such as the <{CarbonFootprint}> (see [[#dt-pf]])
2. <{CarbonFootprint}>: contains information related to the carbon footprint
    of a product (see [[#dt-carbonfootprint]])
3. <{DataModelExtension}>: contains additional information beyond the data model
    specified in this document.

The overall data model is designed for interactions between [=data owners=] and
[=data recipients=], to enable
(i) interoperability,
(ii) comparability of and transparency over product footprints, or
(iii) the calculation of derived <{CarbonFootprint|CarbonFootprints}> from other <{CarbonFootprint|CarbonFootprints}>.

Additional uses of the data model are supported through the concept of
[=Data Model Extensions=]. These allow [=data owners=] to add
further information to a <{ProductFootprint}>.


## Data Type: <dfn element>ProductFootprint</dfn> ## {#dt-pf}

`ProductFootprint` is a data type which represents the carbon footprint
of a product under a specific scope ([[#dt-carbonfootprint-scope]])
and with values calculated in accordance with the [=Pathfinder Framework=].

The objective of a `ProductFootprint` is to provide interoperability between
the creator (the [=data owner=]) and the consumer (the [=data recipient=]) of
ProductFootprints. The details on the exchange of ProductFootprints are
specified in [[#api]].

Conceptually, the data type <{ProductFootprint}> is modeled as a multi-purpose
container for product-specific emissions factors which is supported by
extensibility through [=Data Model Extensions=].

Data Model Extensions enable [=data owners=] to exchange additional information
related to a product with [=data recipients=]. The details are specified
in [[#dt-datamodelextension]] as well as [[!EXTENSIONS-GUIDANCE]], and [[!DATA-MODEL-EXTENSIONS]].

Each `ProductFootprint` can and should be updated over time, for instance to
incorporate new or refined data from [=data owners=] (see [[#lifecycle]]).


### Properties ### {#pf-properties}

A ProductFootprint has the following properties:

<figure id="pf-properties-table" dfn-type="element-attr" dfn-for="ProductFootprint">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>id</dfn> : [=PfId=]
        <td>String
        <td>M
        <td>The product footprint identifier, See [[#dt-pfid]] for details.
      <tr>
        <td><dfn>specVersion</dfn>
        <td>String
        <td>M
        <td>
            The version of the ProductFootprint data specification with value <code>[VERSION]</code>.

            Advisement: Subsequent revisions will update this value according to [Semantic Versioning 2.0.0](https://semver.org/lang/en/).
      <tr>
        <td><dfn>precedingPfIds</dfn> : [=PfId=]
        <td>Array of Strings
        <td>O
        <td>
            If defined, MUST be non-empty set of preceding product footprint identifiers without duplicates.
            See [[#dt-pfid]] and [[#lifecycle-classification]] for details.
      <tr>
        <td><dfn>version</dfn>
        <td>Number
        <td>M
        <td>The version of the <{ProductFootprint}> with value an integer in the inclusive range of `0..2^31-1`.
      <tr>
        <td><dfn>created</dfn> : [=DateTime=]
        <td>String
        <td>M
        <td>A ProductFootprint MUST include the property `created` with value the timestamp of the creation of the ProductFootprint.
      <tr>
        <td><dfn>updated</dfn> : [=DateTime=]
        <td>String
        <td>O
        <td>A ProductFootprint SHOULD include the property `updated` with value the timestamp of the ProductFootprint update. A ProductFootprint MUST NOT include this property if an update has never been performed. The timestamp MUST be in UTC.
      <tr>
        <td><dfn>status</dfn>
        <td>String
        <td>M
        <td>
          Each ProductFootprint MUST include the property `status` with value one of the following values:

          : Active
          :: The default status of a product footprint is `Active`. A product
               footprint with <{ProductFootprint/status}> `Active` CAN be used
               by a [=data recipients=], e.g. for product footprint calculations.

          : Deprecated
          :: The product footprint is deprecated and SHOULD NOT be used for e.g. product footprint calculations by [=data recipients=].

          See [[#lifecycle]] for details.
      <tr>
        <td><dfn>statusComment</dfn>
        <td>String
        <td>O
        <td>
          If defined, the value should be a message explaining the reason for the current status.

          See [[#lifecycle]] for details.
      <tr>
        <td><dfn>validityPeriodStart</dfn> : [=DateTime=]
        <td>String
        <td>O
        <td>If defined, the start of the validity period of the ProductFootprint.
              The <dfn>validity period</dfn> is the time interval during which the ProductFootprint is declared as valid for use by a receiving [=data recipient=].

              The validity period is OPTIONAL defined by the properties <{ProductFootprint/validityPeriodStart}> (including) and <{ProductFootprint/validityPeriodEnd}> (excluding).

              If no validity period is specified, the ProductFootprint is valid for 3 years starting with <{CarbonFootprint/referencePeriodEnd}>.

              If a validity period is to be specified, then
              1. the value of <{ProductFootprint/validityPeriodStart}> MUST be defined with value greater than or equal to the value of <{CarbonFootprint/referencePeriodEnd}>.
              2. the value of <{ProductFootprint/validityPeriodEnd}> MUST be defined with value
                 1. strictly greater than <{ProductFootprint/validityPeriodStart}>, and
                 2. less than or equal to <{CarbonFootprint/referencePeriodEnd}> + 3 years.
      <tr>
        <td><dfn>validityPeriodEnd</dfn> : [=DateTime=]
        <td>String
        <td>O
        <td>The end (excluding) of the valid period of the ProductFootprint. See <{ProductFootprint/validityPeriodStart}> for further details.
      <tr>
        <td><dfn>companyName</dfn>
        <td>String
        <td>M
        <td>The name of the company that is the ProductFootprint Data Owner, with value a non-empty [=String=].
      <tr>
        <td><dfn>companyIds</dfn> : [=CompanyIdSet=]
        <td>Array
        <td>M
        <td>The non-empty set of Uniform Resource Names ([[!RFC8141|URN]]). Each value of this set is supposed to uniquely identify the ProductFootprint Data Owner. See [=CompanyIdSet=] for details.
      <tr>
        <td><dfn>productDescription</dfn>
        <td>String
        <td>M
        <td>The free-form description of the product plus other information related to it such as production technology or packaging.
      <tr>
        <td><dfn>productIds</dfn> : [=ProductIdSet=]
        <td>Array
        <td>M
        <td>The non-empty set of [=ProductIds=]. Each of the values in the set is supposed to uniquely identify the product. What constitutes a suitable product identifier depends on the product, the conventions, contracts, and agreements between the [=Data Owner=] and a [=Data Recipient=] and is out of the scope of this specification.
      <tr>
        <td><dfn>productCategoryCpc</dfn> : [=CpcCode=]
        <td>String
        <td>M
        <td>

          Advisement: This property will become OPTIONAL in version 3 of the Technical Specifications.

          A UN Product Classification Code (CPC) that the given product belongs to.
      <tr>
        <td><dfn>productNameCompany</dfn>
        <td>String
        <td>M
        <td>The non-empty trade name of the product.
      <tr>
        <td><dfn>comment</dfn>
        <td>String
        <td>M
        <td>

          Advisement: This property will become OPTIONAL in version 3 of the Technical Specifications.

          The additional information related to the product footprint.

          Whereas the property <{ProductFootprint/productDescription}> contains product-level information, <{ProductFootprint/comment}> SHOULD be used for information and instructions related to the calculation of the footprint, or other information which informs the ability to interpret, to audit or to verify the Product Footprint.
      <tr>
        <td><dfn>pcf</dfn> : <{CarbonFootprint}>
        <td>Object
        <td>M
        <td>The carbon footprint of the given product with value conforming to the data type <{CarbonFootprint}>.
      <tr>
        <td><dfn>extensions</dfn> : <{DataModelExtension}>[]
        <td>Array
        <td>O
        <td>
          If defined, 1 or more data model extensions associated with the ProductFootprint.

          <{ProductFootprint/extensions}> MUST be encoded as a non-empty JSON Array of
          <{DataModelExtension}> JSON objects. See <{DataModelExtension}> for details.
  </table>
  <figcaption>Properties of data type ProductFootprint</figcaption>

</figure>


## Data Type: <dfn element>CarbonFootprint</dfn> ## {#dt-carbonfootprint}

A CarbonFootprint represents the carbon footprint of a product and related data in accordance with the [=Pathfinder Framework=].

### Scope of a CarbonFootprint ### {#dt-carbonfootprint-scope}

Each CarbonFootprint is scoped by
1. Time Period: the time period is defined by the properties <{CarbonFootprint/referencePeriodStart}> and <{CarbonFootprint/referencePeriodEnd}> (see [=Pathfinder Framework=] section 6.1.2.1)
2. Geography: further set by the properties <{CarbonFootprint/geographyRegionOrSubregion}>, <{CarbonFootprint/geographyCountry}>, and <{CarbonFootprint/geographyCountrySubdivision}> (see [=Pathfinder Framework=] section 6.1.2.2)

If a CarbonFootprint
1. Has geographical granularity `Global`, then the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
2. Has a regional or sub-regional geographical granularity, then the property <{CarbonFootprint/geographyRegionOrSubregion}> MUST be `defined` and the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
3. Has a country-specific geographical granularity, then property <{CarbonFootprint/geographyCountry}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
4. Has a country subdivision-specific geographical granularity, then property <{CarbonFootprint/geographyCountrySubdivision}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountry}> MUST be `undefined`.


An overview of the relationship between the geographic scope and the definedness or undefinedness of properties is given in the following table:

<figure id="pdf-geographic-scopes-table">
  <table class="data">
    <thead>
      <tr>
        <th>Geographical Granularity / Level of aggregation
        <th>Property <{CarbonFootprint/geographyRegionOrSubregion}>
        <th>Property <{CarbonFootprint/geographyCountry}>
        <th>Property <{CarbonFootprint/geographyCountrySubdivision}>
    <tbody>
      <tr>
        <td>Global
        <td>`undefined`
        <td>`undefined`
        <td>`undefined`
      <tr>
        <td>Regional or Subregional
        <td>`defined`
        <td>`undefined`
        <td>`undefined`
      <tr>
        <td>Country
        <td>`undefined`
        <td>`defined`
        <td>`undefined`
      <tr>
        <td>Subdivision
        <td>`undefined`
        <td>`undefined`
        <td>`defined`
  </table>
  <figcaption>Geographic scope and definedness of CarbonFootprint properties</figcaption>

</figure>


### Properties ### {#dt-carbonfootprint-properties}

The properties of a CarbonFootprint are listed in the table below.

Advisement:
  The properties marked with `O*` are OPTIONAL only for reporting periods
  before 2025, and for reporting periods including the beginning of calendar
  year 2025 or later, the properties marked with `O*` MUST be defined.

<figure id="pf-carbonfootprint-properties-table" dfn-type="element-attr" dfn-for="CarbonFootprint">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>declaredUnit</dfn> : {{DeclaredUnit}}
        <td>String
        <td>M
        <td>The unit of analysis of the product. See Data Type {{DeclaredUnit}} for further information.
      <tr>
        <td><dfn>unitaryProductAmount</dfn> : [=Decimal=]
        <td>String
        <td>M
        <td>The amount of <{CarbonFootprint/declaredUnit|Declared Units}> contained within the product to which the [[#dt-carbonfootprint|PCF]] is referring to. The value MUST be strictly greater than `0`.
      <tr>
        <td><dfn>pCfExcludingBiogenic</dfn> : [=Decimal=]
        <td>String
        <td>M
        <td>The product carbon footprint of the product <i>excluding</i> biogenic CO2 emissions. The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
      <tr>
        <td><dfn>pCfIncludingBiogenic</dfn> : [=Decimal=]
        <td>String
        <td>O*
        <td>If present, the product carbon footprint of the product <i>including all</i> biogenic emissions (CO2 and otherwise). The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=].

              Note: the value of this property can be less than `0` (zero).

      <tr>
        <td><dfn>fossilGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>M
        <td>The emissions from fossil sources as a result of fuel combustion, from fugitive emissions, and from process emissions. The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
      <tr>
        <td><dfn>fossilCarbonContent</dfn> : [=Decimal=]
        <td>String
        <td>M
        <td>The fossil carbon content of the product (mass of carbon). The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg Carbon per declared unit` (`kgC / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
      <tr>
        <td><dfn>biogenicCarbonContent</dfn> : [=Decimal=]
        <td>String
        <td>M
        <td>The biogenic carbon content of the product (mass of carbon). The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg Carbon per declared unit` (`kgC / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
      <tr>
        <td><dfn>dLucGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>O*
        <td>If present, emissions resulting from recent (i.e., previous 20 years) carbon stock loss due to land conversion directly on the area of land under consideration. The value of this property MUST include direct land use change (dLUC) where available, otherwise statistical land use change (sLUC) can be used.
          The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
          See [=Pathfinder Framework=] (Appendix B) for details.
      <tr>
        <td><dfn>landManagementGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>O*
        <td>If present, GHG emissions and removals associated with land-management-related changes, including non-CO2 sources.
          The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=].
      <tr>
        <td><dfn>otherBiogenicGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>O*
        <td>If present, all other biogenic GHG emissions associated with product manufacturing and transport that are not included in dLUC (<{CarbonFootprint/dLucGhgEmissions}>), iLUC (<{CarbonFootprint/iLucGhgEmissions}>), and land management (<{CarbonFootprint/landManagementGhgEmissions}>).
          The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
      <tr>
        <td><dfn>iLucGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>O
        <td>If present, emissions resulting from recent (i.e., previous 20 years) carbon stock loss due to land conversion on land not owned or controlled by the company or in its supply chain, induced by change in demand for products produced or sourced by the company.
          The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
          See [=Pathfinder Framework=] (Appendix B) for details.
      <tr>
        <td><dfn>biogenicCarbonWithdrawal</dfn> : [=Decimal=]
        <td>String
        <td>O*
        <td>If present, the Biogenic Carbon contained in the product converted to kilogram of CO2e. The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kgCO2e / declaredUnit` expressed as a [=decimal=] equal to or <i>less than</i> zero.

      <tr>
        <td><dfn>aircraftGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>O
        <td>If present, the GHG emissions resulting from aircraft engine usage for the transport of the product, excluding radiative forcing. The value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per declared unit` (`kgCO2e / declaredUnit`), expressed as a [=decimal=] equal to or greater than zero.
      <tr>
        <td><dfn>characterizationFactors</dfn>
        <td>String
        <td>M
        <td>

          Advisement: This property is DEPRECATED and only kept to ensure backwards-compatibility. It will be removed in version 3 of these Technical Specifications. It does not replace the (also mandatory) property <{CarbonFootprint/ipccCharacterizationFactorsSources}>.

          The IPCC version of the GWP characterization factors used in the calculation of the PCF (see [=Pathfinder Framework=] Section 3.2.2). In case several characterization factors are used, indicate the earliest version used in your calculations, disregarding supplier provided PCFs. The value MUST be one of the following:

          : `AR6`
          :: for the Sixth Assessment Report of the Intergovernmental Panel on Climate Change (IPCC)
          : `AR5`
          :: for the Fifth Assessment Report of the IPCC.
     <tr>
        <td><dfn>ipccCharacterizationFactorsSources</dfn>
        <td>Array of Strings
        <td>M
        <td>The characterization factors from one or more IPCC Assessment Reports used in the calculation of the PCF (see [=Pathfinder Framework=] Section 3.2.2).
              It MUST be a non-empty set of strings with the format `AR$VERSION$`, where `$VERSION$` stands for the
              IPCC report version number and MUST be an integer.

          Example values:
          <div class=example>["AR6"]</div>
          <div class=example>["AR5", "AR6"]</div>

          Advisement: Per the Framework, the latest available characterization factor version shall be used, i.e., `["AR6"]`. In the event this is not possible, include the set of all characterization factors used.
      <tr>
        <td><dfn>crossSectoralStandardsUsed</dfn> : [=CrossSectoralStandardSet=]
        <td>Array
        <td>M
        <td>The cross-sectoral standards applied for calculating or allocating [=GHG=] emissions
      <tr>
        <td><dfn>productOrSectorSpecificRules</dfn> : [=ProductOrSectorSpecificRuleSet=]
        <td>Array
        <td>O
        <td>The product-specific or sector-specific rules applied for calculating or allocating GHG emissions. If no product or sector specific rules were followed, this set MUST be empty.
      <tr>
        <td><dfn>biogenicAccountingMethodology</dfn>
        <td>String
        <td>O*
        <td>The standard followed to account for biogenic emissions and removals. If defined, the value MUST be one of the following:

          : PEF
          :: for the EU [Product Environmental Footprint Guide](https://ec.europa.eu/environment/archives/eussd/pdf/footprint/PEF%20methodology%20final%20draft.pdf)
          : ISO
          :: For the ISO 14067 standard
          : GHGP
          :: For the Greenhouse Gas Protocol (GHGP) Land sector and Removals Guidance
          : Quantis
          :: For the Quantis [Accounting for Natural Climate Solutions](https://quantis.com/report/accounting-for-natural-climate-solutions-guidance/) Guidance

          Advisement: The enumeration of standards above will be evolved in future revisions. Account for this when implementing the validation of this property.
      <tr>
        <td><dfn>boundaryProcessesDescription</dfn>
        <td>String
        <td>M
        <td>

          Advisement: This property will become OPTIONAL in version 3 of the Technical Specifications.

          The processes attributable to each lifecycle stage.

          Example text value:
          <div class=example>`Electricity consumption included as an input in the production phase`</div>
      <tr>
        <td><dfn>referencePeriodStart</dfn> : [=DateTime=]
        <td>String
        <td>M
        <td>The start (including) of the time boundary for which the PCF value
              is considered to be representative. Specifically, this start date
              represents the earliest date from which activity data was collected
              to include in the PCF calculation.

              See the [=Pathfinder Framework=] section 6.1.2.1 for further details.
      <tr>
        <td><dfn>referencePeriodEnd</dfn> : [=DateTime=]
        <td>String
        <td>M
        <td>The end (excluding) of the time boundary for which the PCF value is
              considered to be representative. Specifically, this end date
              represents the latest date from which activity data was collected
              to include in the PCF calculation.

              See the [=Pathfinder Framework=] section 6.1.2.1 for further details.
      <tr>
        <td><dfn>geographyCountrySubdivision</dfn>
        <td>String
        <td>
        <td>If present, a ISO 3166-2 Subdivision Code. See [[#dt-carbonfootprint-scope]] for further details.

          Example value for the State of New York in the United States of America:
          <div class=example>`US-NY`</div>
          Example value for the department Yonne in France
          <div class=example>`FR-89`</div>
      <tr>
        <td><dfn>geographyCountry</dfn> : [=ISO3166CC=]
        <td>String
        <td>
        <td>If present, the value MUST conform to data type [=ISO3166CC=]. See [[#dt-carbonfootprint-scope]] for further details.

        Example value in case the geographic scope is France
        <div class=example>`FR`</div>
      <tr>
        <td><dfn>geographyRegionOrSubregion</dfn> : {{RegionOrSubregion}}
        <td>String
        <td>
        <td>If present, the value MUST conform to data type {{RegionOrSubregion}}. See [[#dt-carbonfootprint-scope]] for further details. Additionally, see the [=Pathfinder Framework=] Section 6.1.2.2.
      <tr>
        <td><dfn>secondaryEmissionFactorSources</dfn> : <{EmissionFactorDSSet}>
        <td>Array
        <td>O
        <td>If secondary data was used to calculate the <{CarbonFootprint}>, then it MUST include the property <{CarbonFootprint/secondaryEmissionFactorSources}> with value the emission factors used for the <{CarbonFootprint}> calculation.

        If no secondary data is used, this property MUST BE `undefined`.
      <tr>
        <td><dfn>exemptedEmissionsPercent</dfn>
        <td>Number
        <td>M
        <td>

            Advisement: The upper boundary of this property (currently `5`) will be removed in version 3 of the Technical Specifications.

            The Percentage of emissions excluded from PCF, expressed as a decimal number between `0.0` and `5` including. See [=Pathfinder Framework=].
      <tr>
        <td><dfn>exemptedEmissionsDescription</dfn>
        <td>String
        <td>M
        <td>

          Advisement: This property will become OPTIONAL in version 3 of the Technical Specifications.

          Rationale behind exclusion of specific PCF emissions, CAN be the empty string if no emissions were excluded.
      <tr>
        <td><dfn>packagingEmissionsIncluded</dfn>
        <td>Boolean
        <td>M
        <td>A boolean flag indicating whether packaging emissions are included in the PCF (<{CarbonFootprint/pCfExcludingBiogenic}>, <{CarbonFootprint/pCfIncludingBiogenic}>).
      <tr>
        <td><dfn>packagingGhgEmissions</dfn> : [=Decimal=]
        <td>String
        <td>O
        <td>
          Emissions resulting from the packaging of the product.
          If present, the value MUST be calculated per <{CarbonFootprint/declaredUnit|declared unit}> with unit `kg of CO2 equivalent per kilogram` (`kgCO2e / declared unit`), expressed as a [=decimal=] equal to or greater than zero.
          The value MUST NOT be defined if <{CarbonFootprint/packagingEmissionsIncluded}> is `false`.
      <tr>
        <td><dfn>allocationRulesDescription</dfn>
        <td>String
        <td>O
            <td>If present, a description of any allocation rules applied and the rationale explaining how the selected approach aligns with [=Pathfinder Framework=] rules (see Section 3.3.1.4).
      <tr>
        <td><dfn>uncertaintyAssessmentDescription</dfn>
        <td>String
        <td>O
            <td>If present, the results, key drivers, and a short qualitative description of the uncertainty assessment.
      <tr>
        <td><dfn>primaryDataShare</dfn> : [=Percent=]
        <td>Number
        <td>O*
        <td>
          The share of primary data in percent. See the [=Pathfinder Framework=] Sections 4.2.1 and 4.2.2, Appendix B.

          For reporting periods ending before the beginning of year 2025, at least property <{CarbonFootprint/primaryDataShare}> or propery <{CarbonFootprint/dqi}> MUST be defined.

          For reporting periods including the beginning of year 2025 or after, this property MUST be defined.
      <tr>
        <td><dfn>dqi</dfn> : <{DataQualityIndicators}>
        <td>Object
        <td>O*
        <td>
          If present, the Data Quality Indicators (dqi) in accordance with the [=Pathfinder Framework=] Sections 4.2.1 and 4.2.3, Appendix B.

          For reporting periods ending before the beginning of year 2025, at least property <{CarbonFootprint/primaryDataShare}> or propery <{CarbonFootprint/dqi}> MUST be defined.

          For reporting periods including the beginning of year 2025 or after, this property MUST be defined.
      <tr>
        <td><dfn>assurance</dfn> : <{Assurance}>
        <td>Object
        <td>O
            <td>If present, the Assurance information in accordance with the [=Pathfinder Framework=].
  </table>
  <figcaption>Properties of data type CarbonFootprint</figcaption>

</figure>


## Data Type: <dfn element>DataQualityIndicators</dfn> ## {#dt-dataqualityindicators}

Data type `DataQualityIndicators` contains the quantitative data quality indicators in conformance with [=Pathfinder Framework=] Section 4.2.3 and Appendix B.

Each property is optional until the reporting period includes the beginning of calendar year 2025, or later, when all properties MUST be defined.

The following properties are defined for data type <{DataQualityIndicators}>:

<figure id="pf-dataqualityindicators-properties-table" dfn-type="element-attr" dfn-for="DataQualityIndicators">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>coveragePercent</dfn> : [=Percent=]
        <td>Number
        <td>
          Percentage of PCF included in the data quality assessment based on the `>5%` emissions threshold.
      <tr>
        <td><dfn>technologicalDQR</dfn>
        <td>Number
        <td>
          Quantitative data quality rating (DQR) based on the data quality matrix (See [=Pathfinder Framework=] Table 9),
          scoring the technological representativeness of the sources used for PCF calculation based on
          weighted average of all inputs representing >5% of PCF emissions.

          The value MUST be a [=decimal=] between `1` and `3` including.
      <tr>
        <td><dfn>temporalDQR</dfn>
        <td>Number
        <td>
          Quantitative data quality rating (DQR) based on the data quality matrix (Table 9),
          scoring the temporal representativeness of the sources used for PCF calculation based on
          weighted average of all inputs representing >5% of PCF emissions.

          The value MUST be between `1` and `3` inclusive.
      <tr>
        <td><dfn>geographicalDQR</dfn>
        <td>Number
        <td>
          Quantitative data quality rating (DQR) based on the data quality matrix (Table 9),
          scoring the geographical representativeness of the sources used for PCF calculation
          based on weighted average of all inputs representing >5% of PCF emissions.

          The value MUST be between `1` and `3` inclusive.
      <tr>
        <td><dfn>completenessDQR</dfn>
        <td>Number
        <td>
          Quantitative data quality rating (DQR) based on the data quality matrix (Table 9),
          scoring the completeness of the data collected for PCF calculation based on
          weighted average of all inputs representing >5% of PCF emissions.

          The value MUST be between `1` and `3` inclusive.
      <tr>
        <td><dfn>reliabilityDQR</dfn>
        <td>Number
        <td>
          Quantitative data quality rating (DQR) based on the data quality matrix (Table 9),
          scoring the reliability of the data collected for PCF calculation based on
          weighted average of all inputs representing >5% of PCF emissions.

          The value MUST be between `1` and `3` inclusive.
    </table>
  <figcaption>Properties of data type DataQualityIndicators</figcaption>
</figure>

<div class=example>
  Example value for the case that all DQIs are known but no coverage after exemption assessment performed:
  <pre highlight=json>
  {
    "technologicalDQR": 2.0,
    "temporalDQR": 2.0,
    "geographicalDQR": 2.0,
    "completenessDQR": 2.0,
    "reliabilityDQR": 2.0
  }
  </pre>
</div>


## Data Type: <dfn element>Assurance</dfn> ## {#dt-assurance}

Data type `Assurance` contains the assurance in conformance with [=Pathfinder Framework=] chapter 5 and appendix B.

The following properties are defined for data type <{Assurance}>:

<figure id="pf-assurance-properties-table" dfn-type="element-attr" dfn-for="Assurance">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>assurance</dfn>
        <td>Boolean
        <td>M
        <td>
          A boolean flag indicating whether the <{CarbonFootprint}> has been
          assured in line with [=Pathfinder Framework=] requirements (section 5).
      <tr>
        <td><dfn>coverage</dfn>
        <td>String
        <td>O
        <td>
          Level of granularity of the emissions data assured, with value equal to
          - `corporate level` for corporate level
          - `product line` for product line
          - `PCF system` for PCF System
          - `product level` for product level

          This property MAY be undefined only if the kind of assurance was not performed.
      <tr>
        <td><dfn>level</dfn>
        <td>String
        <td>O
        <td>
          Level of assurance applicable to the PCF, with value equal to
          - `limited` for limited assurance
          - `reasonable` for reasonable assurance

          This property MAY be undefined only if the kind of assurance was not performed.

      <tr>
        <td><dfn>boundary</dfn>
        <td>String
        <td>O
        <td>Boundary of the assurance, with value equal to
          - `Gate-to-Gate` for Gate-to-Gate
          - `Cradle-to-Gate` for Cradle-to-Gate.

          This property MAY be undefined only if the kind of assurance was not performed.
      <tr>
        <td><dfn>providerName</dfn>
        <td>String
        <td>M
        <td>The non-empty name of the independent third party engaged to undertake the assurance.

        Advisement: Given this property was incorrectly and unintentionally published in V2 of the Technical Specifications as Mandatory, it will be reverted to Optional in version 3 of the Technical Specifications.
      <tr>
        <td><dfn>completedAt</dfn> : [=DateTime=]
        <td>String
        <td>O
        <td>The date at which the assurance was completed. See data type [=DateTime=] for details.
      <tr>
        <td><dfn>standardName</dfn>
        <td>String
        <td>O
        <td>
          Name of the standard against which the PCF was assured.
      <tr>
        <td><dfn>comments</dfn>
        <td>String
        <td>O
        <td>
          Any additional comments that will clarify the interpretation of the assurance.

          This value of this property MAY be the empty string.
    </table>
  <figcaption>Properties of data type Assurance</figcaption>
</figure>

<div class=example>
  Example value for the case that 42% of the product's overall GHG emissions covered by the data quality assessment:
  <pre highlight=json>
  {
    "assurance": true,
    "coverage": "PCF system",
    "level": "limited"
    "boundary": "Cradle-to-Gate"
    "providerName": "My Auditor",
    "completedAt": "2022-12-08T14:47:32Z"
    "standardName": "ISO 14044"
  }
  </pre>
</div>


## Data Type: <dfn element>DataModelExtension</dfn> ## {#dt-datamodelextension}

Each data model extension MUST be a valid JSON object conforming with the
JSON Representation of Data Model Extensions
([§ 5. JSON Representation of a Data Model Extension](https://wbcsd.github.io/data-model-extensions/spec/#instantiation)).

See [[!DATA-MODEL-EXTENSIONS]] for technical details and [[!EXTENSIONS-GUIDANCE]] for data model extension guidance.


<div class=example>
Example imaginary Data Model Extension for encoding shipment-related data, encoded in JSON:

<pre highlight=json>
{
  "specVersion": "2.0.0",
  "dataSchema": "https://catalog.carbon-transparency.com/shipment/1.0.0/data-model.json",
  "data": {
    "shipmentId": "S1234567890",
    "consignmentId": "Cabc.def-ghi",
    "shipmentType": "PICKUP",
    "weight": 10,
    "transportChainElementId": "ABCDEFGHI"
  }
}
</pre>
</div>



## Data Type: <dfn enum>RegionOrSubregion</dfn> ## {#dt-regionorsubregion}

The data type `RegionOrSubregion` MUST be encoded as a [=String=] with value equal to one of the following values:

<dl dfn-type="enum-value" dfn-for="RegionOrSubregion">

: <dfn>Africa</dfn>
:: for the [=UN geographic region=] Africa

: <dfn>Americas</dfn>
:: for the [=UN geographic region=] Americas

: <dfn>Asia</dfn>
:: for the [=UN geographic region=] Asia

: <dfn>Europe</dfn>
:: for the [=UN geographic region=] Europe

: <dfn>Oceania</dfn>
:: for the [=UN geographic region=] Oceania

: <dfn>Australia and New Zealand</dfn>
:: for the [=UN geographic subregion=] Australia and New Zealand

: <dfn>Central Asia</dfn>
::  for the [=UN geographic subregion=] Central Asia

: <dfn>Eastern Asia</dfn>
:: for the [=UN geographic subregion=] Eastern Asia

: <dfn>Eastern Europe</dfn>
:: for the [=UN geographic subregion=] Eastern Europe

: <dfn>Latin America and the Caribbean</dfn>
:: for the [=UN geographic subregion=] Latin America and the Caribbean

: <dfn>Melanesia</dfn>
:: for the [=UN geographic subregion=] Melanesia

: <dfn>Micronesia</dfn>
:: for the [=UN geographic subregion=] Micronesia

: <dfn>Northern Africa</dfn>
:: for the [=UN geographic subregion=] Northern Africa

: <dfn>Northern America</dfn>
:: for the [=UN geographic subregion=] Northern America

: <dfn>Northern Europe</dfn>
::  for the [=UN geographic subregion=] Northern Europe

: <dfn>Polynesia</dfn>
:: for the [=UN geographic subregion=] Polynesia

: <dfn>South-eastern Asia</dfn>
:: for the [=UN geographic subregion=] South-eastern Asia

: <dfn>Southern Asia</dfn>
:: for the [=UN geographic subregion=] Southern Asia

: <dfn>Southern Europe</dfn>
:: for the [=UN geographic subregion=] Southern Europe

: <dfn>Sub-Saharan Africa</dfn>
:: for the [=UN geographic subregion=] Sub-Saharan Africa

: <dfn>Western Asia</dfn>
:: for the [=UN geographic subregion=] Western Asia

: <dfn>Western Europe</dfn>
:: for the [=UN geographic subregion=] Western Europe

</dl>


## Data Type: <dfn element>EmissionFactorDSSet</dfn> ## {#dt-emissionfactordataset}

A set of <{EmissionFactorDS|Emission Factor Data Sources}> of size 1 or larger.

### JSON Data Representation ### {#dt-emissionfactordataset-json}

As an array of objects, with each object conforming to the JSON representation of <{EmissionFactorDS}>.


## Data Type: <dfn element>EmissionFactorDS</dfn> ## {#dt-emissionfactords}

An EmissionFactorDS references emission factor databases (see [=Pathfinder Framework=] Section 4.1.3.2).

### Properties ### {#dt-emissionfactords-properties}

<dl dfn-type="element-attr" dfn-for="EmissionFactorDS">

: <dfn>name</dfn> (mandatory, data type: [=NonEmptyString=])
:: The non-empty name of the emission factor database.

: <dfn>version</dfn> (mandatory, data type: [=NonEmptyString=])
:: The non-empty version of the emission factor database.

</dl>

<div class=example>
Example encoding of a <{EmissionFactorDS}> in JSON:

```json
{
  "name": "ecoinvent",
  "version": "3.9.1"
}
```

</div>


### JSON Representation ### {#dt-emissionfactords-json}

Each <{EmissionFactorDS}> MUST be encoded as a JSON object.



## Data Type: <dfn enum>CrossSectoralStandard</dfn> ## {#dt-crosssectoralstandard}

CrossSectoralStandard is the enumeration of accounting standards used for product carbon footprint calculation. Valid values are

<dl dfn-type="enum-value" dfn-for="CrossSectoralStandard">

: <dfn>GHG Protocol Product standard</dfn>
:: for the GHG Protocol Product standard

: <dfn>ISO Standard 14067</dfn>
:: for ISO Standard 14067

: <dfn>ISO Standard 14044</dfn>
:: for ISO Standard 14044

</dl>

### JSON Representation ### {#dt-crosssectoralstandard-json}

Each CrossSectoralStandard MUST be encoded as a JSON string.



## Data Type: <dfn>CrossSectoralStandardSet</dfn> ## {#dt-crosssectoralstandardset}

A set of {{CrossSectoralStandard}} values.

### JSON Representation ### {#dt-crosssectoralstandardset-json}

As an array of strings, with each string conforming to the JSON representation of {{CrossSectoralStandard}}.


## Data Type: <dfn element>ProductOrSectorSpecificRule</dfn> ## {#dt-productorsectorspecificrule}

A ProductOrSectorSpecificRule refers to a set of product or sector specific rules published by a specific operator and applied during product carbon footprint calculation.

### Properties ### {#dt-productorsectorspecificrule-properties}

<dl dfn-type="element-attr" dfn-for="ProductOrSectorSpecificRule">

: <dfn>operator</dfn> (mandatory, data type: {{ProductOrSectorSpecificRuleOperator}})
:: A ProductOrSectorSpecificRule MUST include the property `operator` with the value conforming to data type {{ProductOrSectorSpecificRuleOperator}}.

: <dfn>ruleNames</dfn> (mandatory, data type: [=NonEmptyStringVector=])
:: A ProductOrSectorSpecificRule MUST include the property `ruleNames` with value the non-empty set of rules applied from the specified <{ProductOrSectorSpecificRule/operator}>.

: <dfn>otherOperatorName</dfn> (optional, data type: [=NonEmptyString=])
::
    If the value of property <{ProductOrSectorSpecificRule/operator}> is `Other`, a <{ProductOrSectorSpecificRule}> MUST include the property `otherOperatorName` with value the name of the operator. In this case, the operator declared MUST NOT be included in the definition of {{ProductOrSectorSpecificRuleOperator}}.
    If the value of property operator is NOT Other, the property <{ProductOrSectorSpecificRule/otherOperatorName}> of a <{ProductOrSectorSpecificRule}> MUST be `undefined`.

</dl>

### JSON Representation ### {#dt-productorsectorspecificrule-json}

Each <{ProductOrSectorSpecificRule}> MUST be encoded as a JSON object.



## Data Type: <dfn>ProductOrSectorSpecificRuleSet</dfn> ## {#dt-productorsectorspecificruleset}

A set of ProductOrSectorSpecificRule of size 1 or larger.

### JSON Representation ### {#dt-productorsectorspecificruleset-json}

Each [=ProductOrSectorSpecificRuleSet=] MUST be encoded as an array of JSON objects, with each object conforming to [[#dt-productorsectorspecificrule-json]].




## Data Type: <dfn enum>ProductOrSectorSpecificRuleOperator</dfn> ## {#dt-productorsectorspecificruleoperator}

A ProductOrSectorSpecificRuleOperator is the enumeration of Product Category Rule (PCR) operators. Valid values are:

<dl dfn-type="enum-value" dfn-for="ProductOrSectorSpecificRuleOperator">

: <dfn>PEF</dfn>
:: for EU / <a href="https://ec.europa.eu/environment/archives/eussd/pdf/footprint/PEF%20methodology%20final%20draft.pdf">PEF</a> Methodology PCRs

: <dfn>EPD International</dfn>
:: for PCRs authored or published by [EPD International](https://www.environdec.com/)

: <dfn>Other</dfn>
:: for a PCR not published by the operators mentioned above

</dl>

### JSON Representation ### {#dt-productorsectorspecificruleoperator-json}

Each value is encoded as a JSON String.



## Data Type: <dfn>NonEmptyStringVector</dfn> ## {#dt-nonemptystringvector}

A list of [=NonEmptyString=] of length 1 or greater.

### JSON Representation ### {#dt-nonemptystringvector-json}

Each NonEmptyStringVector MUST be encoded as an array of [=NonEmptyStrings=].


## Data Type: <dfn>CpcCode</dfn> ## {#dt-cpccode}

A CpCode represents a UN CPC Code version 2.1 value.

Example value of the CPC code for "wood in chips or particles":
<div class="example">`31230`</div>

### JSON Representation ### {#dt-cpccode-json}

Each CpcCode MUST be encoded as a JSON String.


## Data Type: <dfn enum>DeclaredUnit</dfn> ## {#dt-declaredunit}

DeclaredUnit is the enumeration of accepted declared units with values

<dl dfn-type="enum-value" dfn-for="DeclaredUnit">

: <dfn>liter</dfn>
:: for special SI Unit `litre` (see [[!SI-Unit]] Table 8)

: <dfn>kilogram</dfn>
:: for SI Base Unit `kilogram` (see [[!SI-Unit]])

: <dfn>cubic meter</dfn>
:: for cubic meter, the Derived Unit from SI Base Unit `metre`

: <dfn>kilowatt hour</dfn>
:: for kilowatt hour, the Derived Unit from special SI Unit `watt`

: <dfn>megajoule</dfn>
:: for megajoule, the Derived Unit from special SI Unit `joule`

: <dfn>ton kilometer</dfn>
:: for ton kilometer, the Derived Unit from SI Base Units `kilogram` and `metre`

: <dfn>square meter</dfn>
:: for square meter, the Derived Unit from SI Base Unit `metre`

</dl>


### JSON Representation ### {#dt-declaredunit-json}

The value of each {{DeclaredUnit}} MUST be encoded as a JSON String.


## Data Type: <dfn>NonEmptyString</dfn> ## {#dt-nonemptystring}

A String with 1 or more characters.

### JSON Representation ### {#dt-nonemptystring-json}

Each NonEmptyString MUST be encoded as a JSON String.



## Data Type: <dfn>CompanyIdSet</dfn> ## {#dt-companyidset}

A set of [=CompanyIds=] of length 1 or greater.



## Data Type: <dfn>CompanyId</dfn> ## {#dt-companyid}

Each CompanyId MUST be a [=URN=].

### Custom Company Ids (Company Codes) ### {#dt-companyid-custom}

If the [=data owner=] ([=SCA=]) wishes to use a custom company code assigned to it by
a [=data recipient=] as a [=CompanyId=] value, the [=data owner=] SHOULD use the following format:

```
urn:pathfinder:company:customcode:buyer-assigned:$custom-company-code$
```

where `$custom-company-code$` stands for the custom company code assigned by the [=data recipient=].

<div class=example>
A data owner got assigned the custom vendor code `4321` by a buyer, the value of the CompanyId is then:

`urn:pathfinder:company:customcode:buyer-assigned:4321`.
</div>


If the [=data owner=] ([=SCA=]) wishes to use its own custom company code known by
a [=data recipient=] as a [=CompanyId=] value, the [=data owner=] SHOULD use the following format:

```
urn:pathfinder:company:customcode:vendor-assigned:$custom-company-code$
```

where `$custom-company-code$` stands for the custom company code set by the [=data recipient=].

<div class=example>
A data owner uses as custom vendor code `6789` which is known to a buyer, the value of the CompanyId is then:

`urn:pathfinder:company:customcode:vendor-assigned:6789`.
</div>




## Data Type: <dfn>ProductIdSet</dfn> ## {#dt-productidset}

A set of [=ProductIds=] of size 1 or larger.

### JSON Representation ### {#dt-productidset-json}

Each ProductIdSet MUST be encoded as an array of strings.



## Data Type: <dfn>ProductId</dfn> ## {#dt-productid}

Each ProductId MUST be a [=URN=].

### Custom Product Ids (Product Codes) ### {#dt-productid-custom}

If the [=data owner=] ([=SCA=]) wishes to use a custom product code assigned to it by
a [=data recipient=] as a [=ProductId=] value, the [=data owner=] SHOULD use the following format:

```
urn:pathfinder:product:customcode:buyer-assigned:$CUSTOM-PRODUCT-CODE$
```

where `$CUSTOM-PRODUCT-CODE$` stands for the custom product code assigned by the [=data recipient=].

<div class=example>
A data owner got assigned the custom product code `1234` for one of its products by a buyer, the value of the ProductId is then:

`urn:pathfinder:product:customcode:buyer-assigned:1234`.
</div>


If the [=data owner=] ([=SCA=]) wishes to use its own custom product code known by
a [=data recipient=] as a `ProductId` value, the [=data owner=] SHOULD use the following format:

```
urn:pathfinder:product:customcode:vendor-assigned:$CUSTOM-PRODUCT-CODE$
```

where `$CUSTOM-PRODUCT-CODE$` stands for the custom product code set by the [=data recipient=].

<div class=example>
A data owner uses as custom product code `8765` which is known to a buyer, the value of the ProductId is then:

`urn:pathfinder:product:customcode:vendor-assigned:8765`.
</div>

### ProductId based on CAS Registry Numbers ### {#dt-productid-cas}

If the [=data owner=] ([=SCA=]) wishes to use a [CAS Registry Number](https://www.cas.org/cas-data/cas-registry)
as a [=ProductId=] value, the [=data owner=] SHOULD use the following format:

```
urn:pathfinder:product:id:cas:$CAS-REGISTRY-NUMBER$
```

where `$CAS-REGISTRY-NUMBER$` stands for a CAS Registry Number.

<div class=example>
Example ProductId encoding of ethanol with the CAS Registry Number `64-17-5`:

`urn:pathfinder:product:id:cas:64-17-5`
</div>

### ProductId based on IUPAC InChi Code ### {#dt-productid-inchicode}

If the [=data owner=] ([=SCA=]) wishes to use a [IUPAC InChi Code](https://www.inchi-trust.org/) as a [=ProductId=] value, the [=data owner=] SHOULD use the following format:

```
urn:pathfinder:product:id:iupac-inchi:$INCHI-CODE$
```

where `$INCHI-CODE$` stands for a IUPAC InChi Code.

<div class=example>
Example ProductId encoding of Aspirin with the IUPAC InChi Code

`1S/C9H8O4/c1-6(10)13-8-5-3-2-4-7(8)9(11)12/h2-5H,1H3,(H,11,12)`:

```
urn:pathfinder:product:id:iupac-inchi:1S%2FC9H8O4%2Fc1-6%2810%2913-8-5-3-2-4-7%288%299%2811%2912%2Fh2-5H%2C1H3%2C%28H%2C11%2C12%29
```

</div>

## Data Type: <dfn>URN</dfn> ## {#dt-urn}

A String conforming to the [[!RFC8141|URN syntax]].

### JSON Representation ### {#dt-urn-json}

Each [=URN=] MUST be encoded as a JSON String.


## Data Type: <dfn>String</dfn> ## {#dt-string}

A regular UTF-8 String.

### JSON Data Representation ### {#dt-string-json}

Each [=String=] MUST be encoded as a JSON String.



## Data Type: <dfn>Percent</dfn> ## {#dt-percent}

A Decimal number in the range of and including `0` and `100`.

Example values:
<div class=example>
    - `100`
    - `23.0`
    - `7.183924`
    - `0.0`
</div>

### JSON Representation ### {#dt-percent-json}

Each Percent MUST be encoded in IEEE-754 [double-precision floating-point format](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) as a JSON number.



## Data Type: <dfn element>StrictlyPositiveDecimal</dfn> ## {#dt-strictlypositivedecimal}

A positive, non-zero Decimal.

Example values:
<div class=example>
    - 0.123
    - 1000
    - 42.102340
</div>

### JSON Representation ### {#dt-strictlypositivedecimal-json}

See [[[#dt-decimal-json]]].



## Data Type: <dfn>DateTime</dfn> ## {#dt-datetime}

Each DateTime MUST be a date and time string conforming to ISO 8601. The timezone MUST be UTC.

Example value for beginning of March, the year 2020, UTC:
<div class=example>
  `2020-03-01T00:00:00Z`
</div>


### JSON Representation ### {#dt-datetime-json}

Each [=DateTime=] MUST be encoded as a JSON String.



## Data Type: <dfn>ISO3166CC</dfn> ## {#dt-iso3166cc}

An ISO 3166-2 alpha-2 country code.

Example value for tue alpha-2 country code of the United States:
<div class=example>
  `US`
</div>

### JSON Representation ### {#dt-iso3166cc-json}

Each [=ISO3166CC=] MUST be encoded as a JSON String.


## Data Type: <dfn>Decimal</dfn> ## {#dt-decimal}

A dotted-decimal number.

Example values:
<div class=example>
    - `10`
    - `42.12`
    - `-182.84`
</div>

### JSON Representation ### {#dt-decimal-json}

Each Decimal MUST be encoded as a JSON String.


## Data Type: <dfn>PfId</dfn> ## {#dt-pfid}

A PfId MUST be a UUID v4 as specified in [[!RFC4122]].


### JSON Representation ### {#dt-pfid-json}

Each PfId MUST be encoded as a JSON String.

Example JSON string value:

<div class=example>
```json
"f4b1225a-bd44-4c8e-861d-079e4e1dfd69"
```
</div>

# Product Footprint Lifecycle # {#lifecycle}

## Introduction ## {#lifecycle-intro}

<div class=note>This section is non-normative</div>

The contents of a <{ProductFootprint|Product Footprints}> can change over time. For instance when a [=data owner=] publishes an updated Product Footprint ("upstream Product Footprints") which goes into the calculation of another Product Footprint ("downstream Product Footprint").

Even without upstream changes, a downstream Product Footprint can undergo changes in its own right, for instance when calculation errors are discovered and fixed, or when secondary emission databases are updated.

This section defines how changes to Product Footprints shall be handled by [=data owners=] and communicated to [=data recipients=] through the <{ProductFootprint}> data model.

For this, [=changes=] to ProductFootprint properties are defined and classified into [=minor change=] and [=major change=] ([[#lifecycle-classification]]). Depending on the change classification,

1. [=major changes=] must result in a new ProductFootprint ([[#lifecycle-major-changes]]) made available to its [=data recipients=],
1. [=minor changes=] result in either version updates ([[#lifecycle-minor-changes]]) or new ProductFootprint creation ([[#lifecycle-major-changes]])

In addition, if a Product Footprint is no longer valid, [=data owners=] can communicate this by applying a [=minor change=] through setting the <{ProductFootprint/status}> to `Deprecated`


## Change Definition and Classification ## {#lifecycle-classification}

A <dfn>change</dfn> to a <{ProductFootprint}> is defined as a change to one or more properties of a <{ProductFootprint}>, including a change of 1 or more properties from being undefined or to no longer being defined.

A <{ProductFootprint}> with <{ProductFootprint/status}> `Deprecated` MUST NOT be [=changed=].

There are 2 classes of changes to a <{ProductFootprint}>:

: <dfn>minor change</dfn>
::
    A [=minor change=] refers to a set of 1 or more [=changes=] to attributes to a <{ProductFootprint}>, including embedded data such as <{CarbonFootprint}>, etc.

    [=minor changes=] to a <{ProductFootprint}> SHOULD BE limited to correct errors, to incorporate changes in upstream data sources, or to incorporate changes in secondary data sources.

    A [=minor change=] is limited to the following <{CarbonFootprint}> properties:
      1. <{CarbonFootprint/pCfExcludingBiogenic}>, <{CarbonFootprint/pCfIncludingBiogenic}>,
         <{CarbonFootprint/fossilCarbonContent}>, <{CarbonFootprint/biogenicCarbonContent}>,
         <{CarbonFootprint/dLucGhgEmissions}>, <{CarbonFootprint/landManagementGhgEmissions}>,
         <{CarbonFootprint/otherBiogenicGhgEmissions}>, <{CarbonFootprint/iLucGhgEmissions}>,
         <{CarbonFootprint/biogenicCarbonWithdrawal}>, <{CarbonFootprint/aircraftGhgEmissions}>,
         <{CarbonFootprint/packagingEmissionsIncluded}>, <{CarbonFootprint/packagingGhgEmissions}>,
         <{CarbonFootprint/fossilGhgEmissions}>,
         <{CarbonFootprint/biogenicCarbonContent}>, <{CarbonFootprint/primaryDataShare}>,
         <{CarbonFootprint/secondaryEmissionFactorSources}>, <{CarbonFootprint/dqi}>,
         <{CarbonFootprint/primaryDataShare}> as a result of a change resulting from upstream ProductFootprints or an update to secondary data sources
      2. as a result of changes to the description properties
          <{CarbonFootprint/boundaryProcessesDescription}>, <{CarbonFootprint/allocationRulesDescription}>,
         <{CarbonFootprint/uncertaintyAssessmentDescription}>
      4. After a change to the assurance statement <{CarbonFootprint/assurance}> from being `undefined` to being defined

    A [=minor change=] MUST NOT change the <{ProductFootprint/id}> or the scope ([[#dt-carbonfootprint-scope]]) of the <{ProductFootprint}>.

: <dfn>major change</dfn>
::
    A [=major change=] refers to a set of 1 or more [=changes=] with 1 or more changes NOT conforming to the [=minor change=] definition.

    Additionally, a [=data owner=] CAN decide to handle a [=minor change=] as a [=major change=] (see [[#lifecycle-major-changes]] for further details).

<div class=example>
  Major change example: a [=data owner=] decides to publish Product Footprints with a sub-regional geographical granularity instead of a Product Footprint with scope `Global` ([[#dt-carbonfootprint-scope]]).

  The [=host system=] of the data owner then performs the following logical steps:

  1. deprecating the current Product Footprint ([[#lifecycle-minor-changes]]) by creating a new version with status set to `Deprecated`
  2. creating 1 or more new Product Footprints for each new geographical granularity ([[#lifecycle-major-changes]]),
  3. finally, making the new Product Footprints available to its [=data recipients=]

</div>

<div class=example>
  Minor change example: a [=data owner=] received an updated upstream Product Footprint which materially updates the <{CarbonFootprint/fossilGhgEmissions}> of one of its own Product Footprints.

  The [=host system=] of the data owner then performs the following logical steps:

  1. incorporating the <{CarbonFootprint/fossilGhgEmissions}> of the downstream Product Footprint into its Product Footprint
  2. creating a new version of the Product Footprint with the updated <{CarbonFootprint/fossilGhgEmissions}>
       by following the specification from [[#lifecycle-minor-changes]]
  3. finally, making the new Product Footprints available to its [=data recipients=]

</div>


## ProductFootprint version creation from minor changes ## {#lifecycle-minor-changes}

A [=minor change=] to a <{ProductFootprint}> MAY result in a new version of a <{ProductFootprint}>.

The [=data owner=] CAN represent a [=minor change=] to a <{ProductFootprint}> by creating 1 or more new <{ProductFootprint|ProductFootprints}> by following the specification from [[#lifecycle-major-changes]].

A version update to a <{ProductFootprint}> MUST be represented in the <{ProductFootprint}> by
1. incorporating the changes
2. incrementing <{ProductFootprint/version}> by 1 (or more)
3. setting <{ProductFootprint/updated}> to the time and date of the [=minor change=].
    If defined, <{ProductFootprint/updated}> MUST be strictly greater than the previous value of <{ProductFootprint/updated}>.
    Additionally, the value of <{ProductFootprint/updated}> MUST be strictly greater than the value of <{ProductFootprint/created}>.


## New ProductFootprint creation from major changes ## {#lifecycle-major-changes}

A [=Major change=] to 1 or more <{ProductFootprint|preceding ProductFootprints}> MUST result in

1. at least 1 new <{ProductFootprint}> being available to respective [=data recipients=]
2. for each of the preceding ProductFootprints, a new version being available to respective [=data recipients=] by
   1. following [[#lifecycle-minor-changes]]
   2. setting <{ProductFootprint/status}> to `Deprecated`

For each new ProductFootprint, the [=data owner=] MUST
1. make the necessary calculations for the new ProductFootprint
2. assign the new ProductFootprint a unique <{ProductFootprint/id}>
3. set <{ProductFootprint/updated}> to `undefined`
4. set <{ProductFootprint/precedingPfIds}> to the set of <{ProductFootprint/id}> of the 1 or more preceding ProductFootprints



# HTTP REST API # {#api}

## Introduction ## {#api-intro}

<div class=note>Non-normative</div>

This section defines an [[!rfc9112|HTTP]]-based API for the [=interoperable=] exchange of [[#dt-pf|Product Footprint]] data between [=host systems=].

The scope of the HTTP API is minimal by design. Additional features will be added in future versions of this specification.




## <dfn>Host System</dfn> ## {#api-host-system}

A host system serves the needs of a single or multiple [=data owners=]. Additionally, a host system can also serve the needs of [=data recipients=] if it retrieves data from host systems by calling the HTTP REST API ([[#api]]).

Interoperable data exchange between a data owner and a data recipient can be achieved by

1. the data owner offering <{ProductFootprint}> data through a host system that implements the [[#api|HTTP REST API]], and
2. the data recipient making [[#api-auth|authenticated calls]] to retrieve ProductFootprint data; e.g. by calling the [=Action ListFootprints=].


### Out of scope ### {#api-host-system-out-of-scope}

<div class=note>Non-normative</div>

This standard focuses on the necessary definitions to enable interoperable data exchange between data owners and data recipients. This is mediated through a host system which implements the HTTP REST API defined in this document.

Within the [=PACT=] Project, conforming host systems are called solutions.

Solutions add further functionality on top of this standard in order to enable meaningful and interoperable data exchanges.

The following section briefly describes some of the additional functionality which is beyond the scope of this document:

<ol type="a">
  <li>Footprint calculation according to the Pathfinder Framework</li>
  <li>Authentication and access management: the act of deciding and setting which product footprint may be accessed by each data recipient</li>
  <li>Credentials management: the overall functionality to generate access credentials for data recipients, to exchange these credentials with data recipients, to rotate or revoke such credentials, etc.</li>
  <li>Logging: creation and storage of access logs and audit trails related to data exchange, authentication processes, etc.</li>
</ol>


## Authentication Flow ## {#api-auth}

A [=host system=] requires a [=data recipient=] to first authenticate before successfully calling an Action (such as [=Action ListFootprints=] or [=Action Events=]). The [=data recipient=] MUST perform the <dfn>authentication flow</dfn>:

1. data recipient attempting to perform the OpenId Connect-based flow, by
    1. retrieving and validating the [=OpenId Provider Configuration Document=] of the host system (see [[!OPENID-CONNECT]]), and then
    2. using as [=AuthEndpoint=] the value of the `token_endpoint` property of the [=OpenId Provider Configuration Document=]
2. otherwise, data recipient using [=AuthHostname=]`/`[=AuthSubpath=]`/auth/token` as the [=AuthEndpoint=] in the next step.
3. data recipient retrieving the [=access token=] from [=AuthEndpoint=] (see [[#api-action-auth-request]]).

Note: The [=authentication flow=] is defined such that a Version [VERSION] data recipient can authenticate against host versions irrespective of their support for OpenID-Connect.

<figure>
  <img src="diagrams/authentication-flow.svg" height="100%" width="100%" >
  <figcaption>Authentication flow.</figcaption>
</figure>


Once the [=authentication flow=] is complete, the [=data recipient=] can call the other actions of the [=host system=]
  - using the value of `access_token` of the response of the [=Action Authenticate=] call as the
    value for a [[!rfc6750]] <dfn>Bearer token</dfn>
  - presenting the Bearer token for subsequent call(s) to the host system in accordance with
    [[!rfc6750]] Section 2.1

[=Access tokens=] SHOULD expire. In this case, data recipients MUST retrieve a new [=access token=]
as described in this section.

## Host system minimum requirements ## {#api-requirements}

A [=host system=] MUST implement actions [=Action Authenticate=], [=Action ListFootprints=], [=Action GetFootprint=], and [=Action Events=].

A [=host system=] MUST offer its actions under https method only.

A [=host system=] SHOULD offer an [=OpenId Provider Configuration Document=] as specified in [[!OPENID-CONNECT]].

A [=host system=] MUST offer all actions under the same [=Hostname=] and [=Subpath=] except for the token endpoint ([=Action Authenticate=] and the endpoint returned from the [=OpenId Provider Configuration Document=]).

A [=host system=] CAN offer the [=OpenId Provider Configuration Document=] and [=Action Authenticate=] under [=AuthHostname=] and [=AuthSubpath=] which are different from [=Hostname=] and [=Subpath=].

If a host system does not offer an [=OpenId Provider Configuration Document=], [=data recipients=] MUST assume that [=Action Authenticate=] is offered under [=AuthHostname=]`/`[=AuthSubpath=]`/auth/token` (see [[#api-auth]]).

<div class=example>
  The host system's DNS domain name is `example.org` and the subpath is `/wbcsd` whereas the ID management system uses a `id.example.org` domain with an empty subpath. The URIs would then be:

    - for [=OpenId Provider Configuration Document=]: [https://id.example.org/.well-known/openid-configuration](https://example.org/wbcsd/.well-known/openid-configuration)
    - for [=Action Authenticate=]: [https://id.example.org/auth/token](https://id.example.org/auth/token)
    - for [=Action ListFootprints=]: [https://example.org/wbcsd/2/footprints](https://example.org/wbcsd/2/footprints)
    - etc.

</div>


## <dfn>Action Authenticate</dfn> ## {#api-action-auth}

Request an access token using client credentials.

[=Host systems=] MUST implement this action in conformance with [[!rfc6749]] Section 4.4 (OAuth2 Client
Credentials).

[=Host systems=] MAY offer this action under a dedicated [=AuthHostname=] and [=AuthSubpath=].



### Request Syntax (HTTP/1.1) ### {#api-action-auth-request}

For reasons of backwards-compatibility with [=data recipients=] implementing the Version 2.0 authentication flow only,
Host systems MUST offer this action under path [=AuthSubpath=]`/auth/token` and hostname [=AuthHostname=].

<pre highlight=http>
POST <l>[=AuthSubpath=]</l>/auth/token HTTP/1.1
host: <l>[=AuthHostname=]</l>
accept: application/json
content-type: application/x-www-form-urlencoded
authorization: Basic <l>[=BasicAuth=]</l>
content-length: <l>[=ContentLength=]</l>

<l>[=AuthBody=]</l>
</pre>

In addition, if a host system supports OpenId Connect, the host system CAN offer and implement this Action under a second URL, and set this URL as the value of `token_endpoint` of the [=OpenId Provider Configuration Document=].

<pre highlight=http>
POST <l>[=AuthEndpoint=]</l> HTTP/1.1
accept: application/json
content-type: application/x-www-form-urlencoded
authorization: Basic <l>[=BasicAuth=]</l>
content-length: <l>[=ContentLength=]</l>

<l>[=AuthBody=]</l>
</pre>

With Request parameters:

: <dfn>AuthEndpoint</dfn>
:: The endpoint to request an [=access token=] after discovering the value by performing the [=authentication flow=].

: <dfn>AuthSubpath</dfn>:
:: If a [=host system=] uses a relative subpath dedicated to serving an [=OpenId Provider Configuration Document=] and creating an [=access token=], then the requesting [=data recipient=] MUST use this subpath.

: <dfn>AuthHostname</dfn>
:: The requesting data recipient MUST use the domain name of the host
    system dedicated to serving an [=OpenId Provider Configuration Document=] and creating an [=access token=].

: <dfn>BasicAuth</dfn>
:: See [[!rfc6749]] Section 4.4.2

: <dfn>AuthBody</dfn>
:: See [[!rfc6749]] Section 4.4

: <dfn>ContentLength</dfn>
:: The length of the Body. See [[!rfc9112]].


### Response Syntax ### {#api-action-auth-response}

<pre highlight=http>
HTTP/1.1 <l>[=AuthStatusCode=]</l> OK
content-type: application/json
content-length: <l>[=ContentLength=]</l>

<l>[=AuthResponseBody=]</l>
</pre>

With action-specific response parameters

: <dfn>AuthStatusCode</dfn>
:: A HTTP response code conforming to [[!rfc6749]] Section 4.4 and Section 5.

: <dfn>AuthResponseBody</dfn>
:: A JSON Object conforming to either RFC 6749 Section 4.4 in case of successful authentication (containing an <dfn>access token</dfn>), or RFC 6749 Section 5.2 otherwise. See [[#api-auth]] for further details


#### Example Successful Response #### {#api-action-auth-response-success}

Example [=AuthResponseBody=] for a successful authenticate call:

<div class=example>
<pre highlight=json>
{
  "access_token": "...",
  "token_type": "bearer"
}
</pre>
</div>


#### Example Error Response #### {#api-action-auth-response-no-success}

Example HTTP call, for instance generated because username or password did not match:

<div class=example>
<pre highlight=http>
HTTP/1.1 400 Bad Request
date: Mon, 23 Oct 2023 19:33:16 GMT
content-type: application/json
</pre>
<pre highlight=json>
{
  "error": "invalid_client",
  "error_description": "Authentication failed"
}
</pre>
</div>

For further details, for instance on the list of specified values of property `error`, consult [[!rfc6749]] Section 5.2.


## <dfn>Action ListFootprints</dfn> ## {#api-action-list}

Lists [[#dt-pf|product footprints]] with [[#api-action-list-pagination|pagination]] and optional [[#api-action-list-filtering|filtering]].

[=Host systems=] SHOULD implement an access management system and only return the [[#dt-pf|product footprints]] for which the [=data owner=] granted access to the requesting [=data recipient=].

### Filtering ### {#api-action-list-filtering}

Filtering CAN be requested by a [=data recipient=] by setting a conforming [=Filter=] request parameter.

Note: The filter statement syntax is described at the [=Filter=] request parameter.

Support for [=Filter|filtering=] by a [=host system=] is OPTIONAL such that

1. if a [=host system=] does not implement Filtering, it MUST process the
     request as if no [=Filter=] was provided
2. If a [=host system=] implements Filtering, it CAN process the [=filter=]
     statement on a best-effort basis:
     1. it CAN ignore the filter statement or parts of the filter statement, or
     2. it CAN refuse to process the specific filter statement if it does not support
          the filter statement or parts of it. In this case, it MUST return
          an [=error response=] with code [=NotImplemented=].


### Pagination ### {#api-action-list-pagination}

[=Host systems=] MUST implement pagination server-side such that

1. The host system MAY return less ProductFootprints than requested through the [=Limit=] request parameter
2. The host system MUST return a `Link` header if there are additional ProductFootprints ready to be retrieved, such that
   1. The `Link` header conforms to [[!RFC8288]]
   2. The value of the `rel` parameter is equal to `next`
   3. the target IRI (RFC8288, section 3.1) of the `Link` header is absolute
   4. The value of `host` of the target IRI is equal to the value of the `host` request header from the original `ListFootprints` HTTP request

The target IRI from a pagination `link` header is called a <dfn>pagination link</dfn>.

Upon a [=host system=] returning a [=pagination link=]

1. a data recipient CAN call the pagination link more than once
2. upon each call, the host system
    1. MUST return the same set of Product Footprints upon successful authentication (i.e. a Bearer token authentication as defined in [[#api-auth]])
    2. MUST NOT return more product footprints than requested in case [=Limit=] was defined by a [=data recipient=]
    3. MUST return a `Link` header conforming with the previous description in case there are additional ProductFootprints available
3. If a response contains a second pagination link and the data recipient upon calling the second pagination link, the previous pagination link MAY no longer work
    - i.e. data recipients MUST NOT assume that previous pagination links continue to return results after advancing in the pagination process
4. a pagination link MUST be valid for at least 180 seconds after creation
5. a data recipient SHOULD retry calling the pagination link after the server returned an error
   1. and SHOULD use a randomized exponential back-off strategy when retrying


### Request Syntax (HTTP/1.1) ### {#api-action-list-request}

<pre highlight=http>
GET <l>[=Subpath=]</l>/2/footprints?<l>[=Filter=]</l>&<l>[=Limit=]</l> HTTP/1.1
host: <l>[=Hostname=]</l>
authorization: Bearer <l>[=BearerToken=]</l>
</pre>

with request parameters:

: <dfn>Subpath</dfn>
:: If a host system uses a relative subpath, then the requesting data recipient MUST prepend this subpath.

: <dfn>Hostname</dfn>
:: The requesting data recipient MUST use the domain name of the host system.

: <dfn>BearerToken</dfn>
:: see [=Bearer Token=] of section [[#api-auth]]

: <dfn>Filter</dfn>
::
    `Filter` is an OPTIONAL request parameter. If defined,
        1. the name of the HTTP request parameter MUST be `$filter`
        2. the value of the HTTP request parameter MUST conform to the `$filter` syntax as defined by the [ODatav4 specification](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html).

    Additionally, the `$filter` statement MUST only include the following operators and properties:
        - Logical operators `eq`, `lt`, `le`, `gt`, `ge` on properties <{ProductFootprint/created}>, <{ProductFootprint/updated}>, <{ProductFootprint/productCategoryCpc}>, <{CarbonFootprint/geographyCountry}>, <{CarbonFootprint/referencePeriodStart}>, <{CarbonFootprint/referencePeriodEnd}>.
        - Logical operator `and`.
        - Lambda operator `any` on collection-valued properties <{ProductFootprint/companyIds}>, <{ProductFootprint/productIds}>. The expression argument of the operator MUST only include the `eq` operator.

    <div class=example>
        Get footprints with CPC code "3342":

        ```$filter=productCategoryCpc eq '3342'```
    </div>

    <div class=example>
        Get footprints scoped for country:

        ```$filter=pcf/geographyCountry eq 'DE'```
    </div>

    <div class=example id="example-filter-period">
        Get footprints for 2023 reporting period:

        ```$filter=(pcf/referencePeriodStart ge '2023-01-01T00:00:00.000Z') and (pcf/referencePeriodEnd lt '2024-01-01T00:00:00.000Z') ```
    </div>

    <div class=example>
        Get footprints for a specific product:

        ```$filter=productIds/any(productId:(productId eq 'urn:...'))```
    </div>


: <dfn>Limit</dfn>
::
    `Limit` is an OPTIONAL request parameter. If defined,
      1. the name of the HTTP request parameter MUST be `limit`
      2. and the value MUST be a positive integer.


### Response Syntax ### {#api-action-list-response}

<pre highlight=http>
HTTP/1.1 <l>[=ListStatusCode=]</l> <l>[=ListStatusText=]</l>
content-type: application/json
content-length: <l>[=ContentLength=]</l>

<l>[=ListResponseBody=]</l>
</pre>


With response parameters

: <dfn>ListStatusCode</dfn>
::
    If the host system returns a list of product footprints, the `HttpStatusCode` MUST be either 200 or 202:
        - `HttpStatusCode` 200 indicates the returned list is the complete result of the given query.
        - `HttpStatusCode` 202 indicates the returned list is an incomplete result of the given query. The host system MAY return this `HttpStatusCode` if it principally decides that it's able to obtain the remaining data in the future. This `HttpStatusCode` MUST NOT be returned if the request parameter `Filter` is not defined. The [=data recipient=] MAY continue to send the same request with exponential-backoff until it receives the complete result, indicated by `HttpStatusCode` 200.

    If the host system responds with an [=error response=], the `HttpStatusCode` MUST match the HTTP Status Code of the respective [=error response code=].

    If the host system does not return the list of [[#dt-pf|ProductFootprints]], it MUST return an error HTTP Status Code (4xx, 5xx).

: <dfn>ListStatusText</dfn>
::
    The HTTP Status text conforming to the HTTP status code [=ListStatusCode=].

: <dfn>ListResponseBody</dfn>
::
    If the host system accepts the [=access token=], the body MUST be a JSON object with property `data` with value the list of <{ProductFootprint|ProductFootprints}>.
    The list MUST be encoded as a JSON array. If the list is empty, the host system MUST return an empty JSON array.

    The host system MUST return the latest version of each footprint and MAY return previous versions. Among the footprints with identical <{ProductFootprint/id}> values,
    the one with the maximum <{ProductFootprint/version}> value is called the latest version and the rest are called the previous versions.

    If the request parameter `Filter` is defined, the specified expression SHOULD be evaluated for each ProductFootprint in the collection as described in [OData v4 specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752358), and only <{ProductFootprint|ProductFootprints}> where the expression evaluates to true SHOULD be included in the response. ProductFootprints for which the expression evaluates to false or which are not made available for the [=data recipient=] SHOULD be omitted from the list returned in the response.

    If the access token is valid, but the client does not have the necessary permissions to access the requested <{ProductFootprint|ProductFootprints}>, the host system MUST return an error response with code [=AccessDenied=].

    If the host system does not accept the access token because it expired, the body SHOULD be an error response with code [=TokenExpired=].

    In all other cases, the body SHOULD be an error response with code [=BadRequest=].


## <dfn>Action GetFootprint</dfn> ## {#api-action-get}

Retrieves [[#dt-pf|product footprints]].

[=Host systems=] SHOULD implement an access management system and only return the product footprints for which the [=data owner=] granted access to the requesting [=data recipient=].


### Request Syntax ### {#api-action-get-request}

<pre highlight=http>
GET <l>[=Subpath=]</l>/2/footprints/<l>[=GetPfId=]</l> HTTP/1.1
Host: <l>[=Hostname=]</l>
authorization: Bearer <l>[=BearerToken=]</l>
</pre>

with request-specific parameters:

: <dfn>GetPfId</dfn>
:: The value of property <{ProductFootprint/id}> of a product footprint a [=data recipient=] intends to retrieve.


### Response Syntax ### {#api-action-get-response}

<pre highlight=http>
HTTP/1.1 <l>[=GetStatusCode=]</l> <l>[=GetStatusText=]</l>
content-type: application/json
content-length: <l>[=ContentLength=]</l>

<l>[=GetResponseBody=]</l>
</pre>

With response parameters:

: <dfn>GetStatusCode</dfn>
::
    The HTTP Status Code of the response.

    If the host system accepts the [=access token=], the HTTP Status Code MUST be 200.<br/>
    If the host system responds with an [=error response=], the HTTP status code MUST match the HTTP Status Code of the respective [=error response code=].<br/>
    If the host system does NOT return a product footprint, the host system MUST return an error HTTP Status Code (4xx, 5xx).

: <dfn>GetStatusText</dfn>
::
    The HTTP Status text conforming to the HTTP status code [=GetStatusCode=].

: <dfn>GetResponseBody</dfn>
::
    If the host system accepts the access token and allows the requesting data recipient to access the requested product footprint, the body MUST be a JSON object with property data. The value of property data MUST be the product footprint with footprint identifier [=GetPfId=].

    If there were changes to the requested product footprint with identifier [=GetPfId=], the host system SHOULD return the latest product footprint identified with identifier [=GetPfId=] and the maximum value of property version.

    Note: If a host system implements the life cycle rules, then the “latest” version of the requested product footprint is the one with the maximum value of version with <{ProductFootprint/id}> equal to [=GetPfId=].

    If the access token is valid, but the client does not have the necessary permissions to access the requested <{ProductFootprint}>, the host system MUST return an error response with code [=AccessDenied=].

    If the host system does not accept the access token because it expired, the host system SHOULD return an error response with code [=TokenExpired=].

    The host system MAY return an error response with code [=NoSuchFootprint=].

    In all other cases, the body SHOULD be an error response with code [=BadRequest=].


## Action Events ## {#api-action-events}

The <dfn>Action Events</dfn> enables the exchange of event data between [=data owners=] and [=data recipients=].

The Action Events endpoint is specified for the following use cases:

1. enabling a [=data owner=] to notify a [=data recipient=] on updates to 1 or more [[#dt-pf|Product Footprints]] (see [[#api-action-events-case-1]])
2. enabling a [=data recipient=] to request [[#dt-pf|product footprints]] from a [=data owner=] by sending an event to the [=data owner's=] [=Action Events=] endpoint (see [[#api-action-events-case-2]]).

A [=host system=] SHOULD only accept events after authentication (see [[#api-auth]]).

The Action Events endpoint accepts CloudEvent events (see [[!CE]]) encoded in "Structured Content Mode" (see [[!CE-Structured-Content-Mode]].

Support for Action Events is MANDATORY.

If a [=host system=] does NOT implement the [=Action Events=] endpoint,

1. it SHOULD respond with a conforming [=error response=] and HTTP [=error response code=].
1. it SHOULD respond to authenticated Action Events calls with an [=error response=] with code [=NotImplemented=].
2. it MUST respond with an error HTTP Status Code (4xx, 5xx).


### Request Syntax ### {#api-action-events-request}

The general request syntax is:

<pre highlight=http>
POST <l>[=Subpath=]</l>/2/events HTTP/1.1
host: <l>[=Hostname=]</l>
authorization: Bearer <l>[=BearerToken=]</l>
content-type: application/cloudevents+json; charset=UTF-8

<l>[=EventBody=]</l>
</pre>

With request parameters:

: <dfn>EventBody</dfn>
::
    The [=EventBody=] MUST be
    1. a CloudEvents event (see [[!CE]])
    2. encoded as a JSON object as defined in [[!CE-JSON]]
    3. using "Structured Content Mode" (see [[!CE-Structured-Content-Mode]]).

    Further details on the EventBody syntax and semantics are given in [[#api-action-events-case-1]] and [[#api-action-events-case-2]].


### Response Syntax ### {#api-action-events-response}

The [=host system=] upon accepting the event MUST respond with HTTP Status Code 200 and an empty body:

<pre highlight=http>
HTTP/1.1 200 OK
content-length: 0
</pre>

The host system upon <strong>not</strong> accepting the event SHOULD respond with an [=error response=] (see [[#api-error-responses]]).

### Notification of data recipients on Product Footprint updates ### {#api-action-events-case-1}

A [=data owner=] CAN notify a [=data recipient=] about changes to 1 or more [[#dt-pf|product footprints]] by sending a [=PF Update Event=] to the [=data recipient's=] [=Action Events=] endpoint.

A [=data recipient=] upon receiving such an [=PF Update Event=] CAN retrieve the [[#dt-pf|product footprints]] through the [=Action GetFootprint=].

Accordingly, the [=data owner=] of the [=host system=] sending the event MUST make the referenced Product Footprints available to the [=data recipient=] notified through the PF Update Event.

The <dfn>PF Update Event</dfn> is defined as a JSON-encoded CloudEvent event with the following syntax:

<pre highlight=json>
{
  "type": "org.wbcsd.pathfinder.ProductFootprint.Published.v1",
  "specversion": "1.0",
  "id": "<l>[=EventId=]</l>",
  "source": "//<l>[=EventHostname=]</l>/<l>[=EventSubpath=]</l>",
  "time": "2022-05-31T17:31:00Z",
  "data": {
    "pfIds": <l>[=PfIds=]</l>
  }
}
</pre>

with

: <dfn>EventId</dfn>
::
    A unique identifier for the event set by the [=host system=] sending the event.
    The [=EventId=] MUST be a string (see [[!CE-JSON]]).
: <dfn>PfIds</dfn>
::
    A list of [[#dt-pf|product footprint]] that have been updated.
    The [=PfIds=] MUST be the non-empty list of <{ProductFootprint/id}> values of the updated Product Footprints,
    encoded as a JSON array.
: <dfn>EventHostname</dfn>
:: The [=Hostname=] of the [=host system=] sending the event.
: <dfn>EventSubpath</dfn>
:: The handler of the [=host system=] sending the event.


### Asynchronous request and retrieval of Product Footprints ### {#api-action-events-case-2}

A [=data recipient=] CAN request a [=data owner=] to send a [[#dt-pf|product footprint]] by sending a [=PF Request Event=] to the [=data owner's=] [=Action Events=] endpoint.

A [=data owner=] upon receiving a [=PF Request Event=] can then decide how to process the request
1. by sending a [=PF Response Event=] to the [=data recipient's=] [=Action Events=] endpoint
2. by sending a [=PF Response Error Event=] to the [=data recipient's=] [=Action Events=] endpoint to notify the [=data recipient=] that the request cannot be processed, or
3. by not sending any event to the [=data recipient's=] [=Action Events=] endpoint.

If a [=data owner=] accepted a [=PF Request Event=], the host system MUST send the response back to the [=host system=] referenced in `source` of the [=PF Request Event=].

The host system of the [=data owner=] MUST validate the value of `source` before sending the response.

If the host system of the original requestor (the data recipient) is not available or does not accept the response with a HTTP success code (2xx),
the [=data owner's=] host system SHOULD retry sending the response event using exponential backoff.

A host system SHOULD NOT retry sending a response event for more than 3 days.


#### PF Request Event syntax #### {#api-action-events-case-2-request}

The <dfn>PF Request Event</dfn> MUST be a CloudEvent event sent from a [=data recipient=] to a [=data owner=]
containing a [=ProductFootprintFragment|Product Footprint fragment=] that references a single
product. The data recipient CAN add additional properties to a fragment to further limit which PCF
is requested, such as to select PCFs with specific scope(s) ([[#dt-carbonfootprint-scope]]).

Note: this specification does not yet specify the processing requirements of a host system upon
receiving such an event. This means the host system can e.g. ignore 1 or more properties, it might
not accept specific patterns of requests (for instance it might support querying by reporting period
but not by geography), etc.

The [=PF Request Event=] is defined as a JSON-encoded CloudEvent event with the following syntax:

<pre highlight=json>
{
  "type": "org.wbcsd.pathfinder.ProductFootprintRequest.Created.v1",
  "specversion": "1.0",
  "id": "<l>[=EventId=]</l>",
  "source": "//<l>[=EventHostname=]</l>/<l>[=EventSubpath=]</l>",
  "time": "2022-05-31T17:31:00Z",
  "data": {
    "pf": <l>[=ProductFootprintFragment=]</l>,
    "comment": <l>[=PFRequestComment=]</l>
  }
}

</pre>

with

: <dfn>ProductFootprintFragment</dfn>
:: A JSON object with a subset of <{ProductFootprint}> properties, **including nested properties**. It is RECOMMENDED to include at least the [=ProductIds=] in the PF Request Event request body.
    <div class=example>
    Example `ProductFootprintFragment` for querying a PF via <strong>productId</strong> in the PF Request Event request body
    ```json
      {
        "productIds": [
            "urn:gtin:4712345060507"
        ]
      }
    ```
: <dfn>PFRequestComment</dfn>
:: The OPTIONAL comment by the [=data recipient=] to the [=data owner=] about the request.
     If defined, the [=PFRequestComment=] MUST be encoded as a JSON string.

The property `data.comment` of a [=PF Request Event=] is OPTIONAL.

#### PF Response Event syntax #### {#api-action-events-case-2-response}

The <dfn>PF Response Event</dfn> is defined as a CloudEvent event sent from a [=data owner=] to a [=data recipient=] after having received a [=PF Request Event=] from a [=data recipient=] and upon successfully fulfilling the request.

The [=PF Response Event=] is defined as a JSON-encoded CloudEvent event with the following syntax:

<pre highlight=json>
{
  "type": "org.wbcsd.pathfinder.ProductFootprintRequest.Fulfilled.v1",
  "specversion": "1.0",
  "id": "<l>[=EventId=]</l>",
  "source": "//<l>[=EventHostname=]</l>/<l>[=EventSubpath=]</l>",
  "data": {
    "requestEventId": "<l>[=ReqEventId=]</l>",
    "pfs": <l>[=Pfs=]</l>
  }
}

</pre>

with

: <dfn>ReqEventId</dfn>
::
    The [=EventId=] of the [=PF Request Event=] that the [=PF Response Event=] is responding to.
    The [=ReqEventId=] MUST be a string (see [[!CE-JSON]]).
: <dfn>Pfs</dfn>
::
    The list of [[#dt-pf|product footprints]] that have been requested with the [=PF Request Event=] and that are accessible to the [=data recipient=], encoded as an array of <{ProductFootprint}> in JSON.

    Otherwise, the value of [=Pfs=] MUST be the empty JSON array.


#### PF Response Error Event syntax #### {#api-action-events-case-2-response-error}

The <dfn>PF Response Error Event</dfn> is defined as a CloudEvent event sent from a [=data owner=] to a [=data recipient=] after having received a [=PF Request Event=] from a [=data recipient=] and upon NOT successfully fulfilling the request.

The [=PF Response Event=] is defined as a JSON-encoded CloudEvent event with the following syntax:

<pre highlight=json>
{
  "type": "org.wbcsd.pathfinder.ProductFootprintRequest.Rejected.v1",
  "specversion": "1.0",
  "id": "<l>[=EventId=]</l>",
  "source": "...",
  "data": {
    "requestEventId": "<l>[=ReqEventId=]</l>",
    "error": <l>[=ReqErrorResponse=]</l>
  }
}

</pre>

with

: <dfn>ReqErrorResponse</dfn>
::
    The error response that the [=data owner=] is sending to the [=data recipient=] to notify the [=data recipient=] that the request cannot be processed.

    The value of [=ReqErrorResponse=] MUST be an [=error response=] (see [[#api-error-responses]]).

## Error responses ## {#api-error-responses}

The actions [=Action GetFootprint=], [=Action ListFootprints=], and
[=Action Events=] specify general error response handling.

This section specifies the shared HTTP error response handling across these actions.

Error responses are specified in detail such that [=data recipients=] can understand
the cause of the error, and so that potentially [=host systems=] can react on and resolve errors automatically.

Note: [=Action Authenticate=] specifies its own error responses (see [[#api-action-auth-response]]).

Whenever a [=host system=] returns an [=error response=], it MUST send a HTTP response such that
  - the HTTP Status Code equals the `HTTP Status Code` defined for the respective [=error response code=] (see <a href="#api-errors-table">Error Codes Table</a>)
  - with content type set to `application/json`, and
  - with response body the [=error response=]

A <dfn>error response</dfn> is a JSON object with the following properties:
    - `code`: a [=error response code=] encoded as a String
    - `message`: a [=error message=] encoded as a String

A <dfn>error response code</dfn> is a value from column `Error Response Code` from the table below.

A <dfn>error message</dfn> is a human-readable error description. Example values are in column `Example Message` in the table below.

<div class=example>
Example [=AccessDenied=] [=error response=]:

<pre class=include-code>
path: examples/error-response-access-denied.json
highlight: json
</pre>
</div>

A [=host system=] MAY return [=error messages=] different from the table below, for instance localized values depending on a [=data recipient=].


<figure id="api-errors-table">
  <table class="data">
    <thead>
      <tr>
        <th>`Error Response Code`
        <th>`Example Message`
        <th>`HTTP Status Code`
    <tbody>
      <tr>
        <td><dfn>AccessDenied</dfn>
        <td>Access denied
        <td>403
      <tr>
        <td><dfn>BadRequest</dfn>
        <td>Bad Request
        <td>400
      <tr>
        <td><dfn>NoSuchFootprint</dfn>
        <td>The specified footprint does not exist.
        <td>404
      <tr>
        <td><dfn export>NotImplemented</dfn>
        <td>The specified Action or header you provided implies functionality that is not implemented
        <td>400
      <tr>
        <td><dfn>TokenExpired</dfn>
        <td>The specified access token has expired
        <td>401
      <tr>
        <td>InternalError
        <td>An internal or unexpected error has occurred
        <td>500

  </table>
  <figcaption>Listing of error codes and their related error response codes.</figcaption>
</figure>


### Error processing by a data recipient ### {#api-error-responses-processing}

A requesting [=data recipient=] MUST use the code property and potentially also the HTTP Status Code to differentiate between the different errors.



## Examples ## {#api-examples}

<div class=note>Non-normative</div>

### Example Action ListFootprints request and response ### {#api-action-list-example}


<div class="example">

Example request:

<pre highlight=http>
GET /2/footprints?limit=10 HTTP/2
host: api.pathfinder.sine.dev
authorization: Bearer [BearerToken]
</pre>

Example response HTTP headers:
<pre highlight=http>
HTTP/1.1 200 OK
date: Mon, 23 May 2022 19:33:16 GMT
content-type: application/json
content-length: 1831
server: Pathfinder
link: &lt;https://api.pathfinder.sine.dev/2/footprints?limit=10&amp;offset=10&gt;; rel="next"
</pre>

Example response body:
<pre class=include-code>
path: examples/list-footprints-response.json
highlight: json
</pre>

Example response empty body:
<pre highlight=json>
{
  "data": []
}
</pre>

</div>

### Example Error Response ### {#api-error-response-example}

<div class=example>

Example request:

<pre highlight=http>
GET /2/footprints HTTP/2
host: api.pathfinder.sine.dev
</pre>

Example response headers:

```http
HTTP/1.1 403 Forbidden
date: Mon, 23 May 2022 19:33:16 GMT
content-type: application/json
content-length: 44
server: Pathfinder
```
Example response body:
<pre class=include-code>
path: examples/error-response-access-denied.json
highlight: json
</pre>

</div>

### Example PF Request and Response Events  ### {#api-action-events-example}

<strong>Example PF Request Event:</strong>
<div class="example">
<pre highlight=http>
POST Subpath/2/events HTTP/1.1
host: api.pathfinder.sine.dev
authorization: Bearer [BearerToken]
content-type: application/cloudevents+json; charset=UTF-8
</pre>

Example PF Request Event body
```json
  {
    "type": "org.wbcsd.pathfinder.ProductFootprintRequest.Created.v1",
    "specversion": "1.0",
    "id": "848dcf00-2c18-400d-bcb8-11e45bbf7ebd",
    "source": "//RequesterEventHostname/EventSubpath",
    "time": "2023-11-06T16:23:00Z",
    "data": {
        "pf": {
            "productIds": [
                "urn:gtin:4712345060507"
            ]
        },
        "comment": "Please provide current PCF value."
    }
  }
```
Example PF Request Event response headers
  ```http
    HTTP/1.1 200 OK
    content-length: 0
  ```
</div>
<strong>Example PF Response Event:</strong>
<div class="example">
<pre highlight=http>
POST Subpath/2/events HTTP/1.1
host: api.pathfinder.sine.dev
authorization: Bearer [BearerToken]
content-type: application/cloudevents+json; charset=UTF-8
</pre>

Example PF Response Event body
<pre class=include-code>
path: examples/pf-response-event.json
highlight: json
</pre>

Example Response Event response headers
  ```http
    HTTP/1.1 200 OK
    content-length: 0
  ```
</div>


### Example Action GetFootprint request and response ### {#api-action-get-example}

<div class="example">

Example request:

<pre highlight=http>
GET /2/footprint/91715e5e-fd0b-4d1c-8fab-76290c46e6ed HTTP/2
host: api.pathfinder.sine.dev
authorization: Bearer [BearerToken]
</pre>

Example response HTTP headers:
<pre highlight=http>
HTTP/1.1 200 OK
date: Mon, 23 May 2022 19:33:16 GMT
content-type: application/json
content-length: 1831
server: Pathfinder
</pre>

Example response body:
<pre class=include-code>
path: examples/get-footprint-response.json
highlight: json
</pre>

</div>

# Appendix A: License # {#license}

<pre class=include>
path: LICENSE.md
</pre>

# Appendix B: Changelog # {#changelog}

## Version 2.2.1 (May 13, 2024) ## {#changelog-2.2.1-20240513}

Summary of changes:
1. fixed [[#api-action-list-example]], [[#api-action-events-example]],
    [[#api-action-get-example]], and [[#business-cases-async-events-1-workflow]] by removing spurious
    `geographicScope` object

## Version 2.2.1 (May 7, 2024) ## {#changelog-2.2.1-20240507}

Summary of changes:
1. fixed <{CarbonFootprint/dqi}> value types in all examples
2. clarification of <{DataQualityIndicators}> by removing misleading link to [=decimal=]

## Version 2.2.1 (Apr 30, 2024) ## {#changelog-2.2.1-20240430}

Summary of changes:

1. Clarification of <{CarbonFootprint/aircraftGhgEmissions}> definition to make it explicit that
    radiative forcing is excluded.

## Version 2.2.0 (Apr 10, 2024) ## {#changelog-2.2.0}

Release.

## Version 2.2.0-20240402 (Apr 02, 2024) ## {#changelog-2.2.0-20240402}

Summary of changes:

1. removal of notes referring to the transition from v1 to v2
2. fixed the incomplete `assurance` example and moved it to the appropriate section
3. addition of missing examples in the [[#business-cases-async-events-1-workflow]] section
4. addition of advisement to <{CarbonFootprint/exemptedEmissionsPercent}> stating that the upper boundary will be removed in version 3
5. clarification of how to handle error codes in [=ListResponseBody=] and [=GetResponseBody=]

## Version 2.2.0-20240327 (Mar 27, 2024) ## {#changelog-2.2.0-20240327}

Summary of changes:

1. addition of the new [[#business-cases]] chapter
2. clarification of [=PF Request Event=] syntax, including the instruction that the
    [=ProductFootprintFragment=] should refer to one single productm
3. addition of a recommendation to include [=ProductIds=] in the PF Request Event request body
4. fixed the incorrect the value of `pCfExcludingBiogenic` in all relevant examples
5. addition of advisements to properties <{ProductFootprint/productCategoryCpc}>,
    <{ProductFootprint/comment}>, <{CarbonFootprint/boundaryProcessesDescription}>, and
    <{CarbonFootprint/exemptedEmissionsDescription}> stating that they will become OPTIONAL in
    version 3

## Version 2.2.0-20240320 (Mar 20, 2024) ## {#changelog-2.2.0-20240320}

Summary of changes:

1. fixed example 28's HTTP error code (from 401 to 400) in accordance with [[!rfc6749]]

## Version 2.2.0-20240312 (Mar 12, 2024) ## {#changelog-2.2.0-20240312}

Summary of changes:

1. deprecation of the <{CarbonFootprint/characterizationFactors}> property
2. addition of a new <{CarbonFootprint/ipccCharacterizationFactorsSources}> property
3. updates to Action [=Action Events=] implementation requirement - changed from OPTIONAL to MANDATORY
4. addition of an Example for a ProductFootprintFragment indicating a query for a PCF via productId
5. addition of Examples of a PCF request and response Action Event flow

## Version 2.1.0 (Dec 07, 2023) ## {#changelog-2.1.0}

This version introduces additional mandatory functionality:

1. A new authentication flow ([[#api-auth]]) is specified which allows discovery
    of the [=AuthEndpoint=] through an [=OpenId Provider Configuration Document=].
    The flow is backwards-compatible with the 2.0.x-series of authentication flow
    based on the [=AuthSubpath=]`/auth/token` syntax.

## Version 2.0.1-20231026 (Oct 26, 2023) ## {#changelog-2.0.1-20231026}

Summary of changes:

1. clarification of the error responses of the [=Action Authenticate=] endpoint, plus addition of an example error response in line with [[!rfc6749]]

## Version 2.0.1-20230927 (Sep 27, 2023) ## {#changelog-2.0.1-20230927}

Summary of changes:

1. definition fixes to properties <{CarbonFootprint/primaryDataShare}> and <{CarbonFootprint/dqi}> to resolve a discrepancy with the latest version of the Pathfinder Framework:
    previously, the 2 properties were defined in a mutually-exclusive fashion (either one must be defined but *NOT* both) whereas the Pathfinder Framework Version 2.0 defines them as follows (Section 4.2.1, Page 39):
    ```Initially, companies shall calculate and report, as part of PCF data exchange, on at least one of the following metrics: [...]```
2. addition of references to SI Units to data type {{DeclaredUnit}}


## Version 2.0.1-20230720 (Jul 20, 2023) ## {#changelog-2.0.1-20230720}

Summary of changes:

1. clarification to specification of property <{CarbonFootprint/fossilGhgEmissions}>, <{CarbonFootprint/pCfExcludingBiogenic}>, <{CarbonFootprint/pCfIncludingBiogenic}>, and <{CarbonFootprint/biogenicCarbonWithdrawal}>
2. in addition, further clarification on the bounds of the property <{CarbonFootprint/biogenicCarbonWithdrawal}> which must be equal to `0` or less than `0`


## Version 2.0.1-20230629 (Jun 29, 2023) ## {#changelog-2.0.1-20230629}

Summary of changes:

1. clarify unit of properties <{CarbonFootprint/fossilCarbonContent}> and <{CarbonFootprint/biogenicCarbonContent}>: was declared as `kg / declaredUnit` and is now declared as `kgC / declaredUunit`


## Version 2.0.1-20230627 (Jun 27, 2023) ## {#changelog-2.0.1-20230627}

This version fixes 5 definition incorrectness

1. property <{CarbonFootprint/fossilCarbonContent}>: was incorrectly
    defined with unit `kg of CO2e / declaredUnit`. The unit is now defined as `kg / declaredUnit`
2. fix to the `referencePeriod` <a href=#example-filter-period>Filter Example</a>
3. fixed typo in the definition of <{CarbonFootprint/referencePeriodEnd}>
4. fixed definition of <{CarbonFootprint/landManagementGhgEmissions}>: previously, it was incorrectly defined as a non-negative decimal
5. fixed definition of <{CarbonFootprint/biogenicCarbonWithdrawal}>: previously, it was incorrectly defined as a non-negative decimal


In addition, this version:

1. clarifies in [[#api-action-list]] the semantics of the [=Filter=] processing being OPTIONAL by introducing section [[#api-action-list-filtering]]
2. clarifies that a [=host system=] must return HTTP error status codes if it does not implement the events endpoint (see [[#api-action-events]])
3. clarified the [=PCF=] term definition
4. fixed linking to semantic versioning document
5. reworded <{CarbonFootprint/referencePeriodStart}> and <{CarbonFootprint/referencePeriodEnd}>


## Version 2.0.1-20230522 (May 22, 2023) ## {#changelog-2.0.1-20230522}

This version fixes 1 definition incorrectness and includes 4 documentation improvements.

1. property <{CarbonFootprint/biogenicCarbonContent}>: was incorrectly
    defined with unit `kg of CO2e / declaredUnit`. The unit is now defined as `kg / declaredUnit`
2. property <{ProductFootprint/status}>: minor documentation improvements
3. Action [=Action ListFootprints=]: minor documentation improvements
4. property <{CarbonFootprint/biogenicAccountingMethodology}>: addition of an advisement
5. section [[#dt-dataqualityindicators]] is now referencing Table 9 of the Pathfinder Framework


## Version 2.0.1-20230314 (Mar 14, 2023) ## {#changelog-2.0.1-20230314}

This version fixes 2 discrepancies between the Pathfinder Framework
Version 2 and the data model in this specification.

1. property <{CarbonFootprint/boundaryProcessesDescription}>: was incorrectly
    defined as optional in v2.0.0, and this typo is now corrected such that
    the property is correctly marked as mandatory in accordance with the
    Pathfinder Framework Version 2
2. update to definition of property <{CarbonFootprint/primaryDataShare}>:
    it was marked as optional (`O`) and is now marked as `O*`. This update is
    in accordance with the Pathfinder Framework and the field's previous
    (v2.0.0) semantics; i.e. *no* semantical update to the specification
    whatsoever
3. formatting fix to the definition of property <{ProductFootprint/productDescription}>
4. Updates to data type <{Assurance}>:
    1. documentation fix to definition of property <{Assurance/coverage}>:
        was marked as mandatory (`M`) and is now marked as `O` in accordance with its definition and the Pathfinder Framework;
        i.e. *no* semantical update to the specification whatsoever
    2. addition of property <{Assurance/assurance}> in accordance with the Pathfinder Framework


## Version 2.0.0 (Feb 20, 2023) ## {#changelog-2.0.0}

Summary of the major changes and concepts added with this version:

1. update to Pathfinder Framework Version 2.0, including data model changes which are not backwards-compatible, including
    1. addition of data type <{DataQualityIndicators}> and <{Assurance}> to <{CarbonFootprint}>
2. event-based communication between [=host systems=] ([[#api-action-events]])
3. support for data model extensions ([[#dt-datamodelextension]])
4. life cycle management of a <{ProductFootprint}> ([[#lifecycle]])

### Data Model Changes ### {#changelog-2.0.0-data-model}

Overview of the changes to the data model compared with the data model version 1.0.1:

- changes to data type <{ProductFootprint}>:
  - properties <{ProductFootprint/validityPeriodStart}> and <{ProductFootprint/validityPeriodEnd}>: added
  - life cycle properties <{ProductFootprint/precedingPfIds}>, <{ProductFootprint/status}> and <{ProductFootprint/statusComment}>: added
- addition of data type <{DataQualityIndicators}> to <{CarbonFootprint}> via property <{CarbonFootprint/dqi}>
- addition of data type <{Assurance}> to <{CarbonFootprint}> via property <{CarbonFootprint/assurance}>
-  changes to data type <{CarbonFootprint}>:
  - property <{CarbonFootprint/characterizationFactors}>: added
  - property <{CarbonFootprint/exemptedEmissionsPercent}>: added
  - property <{CarbonFootprint/primaryDataShare}>: was mandatory is now optional
  - property <{CarbonFootprint/pCfExcludingBiogenic}>: added
  - property <{CarbonFootprint/pCfIncludingBiogenic}>: added
  - property <{CarbonFootprint/fossilCarbonContent}>: added
  - property <{CarbonFootprint/biogenicCarbonWithdrawal}>: added
  - property <{CarbonFootprint/biogenicAccountingMethodology}>: added
  - property <{CarbonFootprint/packagingEmissionsIncluded}>: added
  - property <{CarbonFootprint/exemptedEmissionsDescription}>: added
  - property <{CarbonFootprint/packagingGhgEmissions}: added
  - property <{CarbonFootprint/uncertaintyAssessmentDescription}>: added
  - property `reportingPeriodStart`: renamed to <{CarbonFootprint/referencePeriodStart}>
  - property `reportingPeriodEnd`: renamed to <{CarbonFootprint/referencePeriodEnd}>
  - property `emissionFactorSources`: renamed to <{CarbonFootprint/secondaryEmissionFactorSources}>
  - property <{CarbonFootprint/aircraftGhgEmissions}>: added
- changes to data type `BiogenicEmissions`:
  - all properties moved to <{CarbonFootprint}> and the data type removed fully, plus
  - property `landUseChangeGhgEmissions` substituted with properties <{CarbonFootprint/iLucGhgEmissions}> and <{CarbonFootprint/dLucGhgEmissions}>
  - property `landUseEmissions` renamed to <{CarbonFootprint/landManagementGhgEmissions}>
  - property `otherEmissions` renamed to <{CarbonFootprint/otherBiogenicGhgEmissions}>
- data type [=CompanyId=]: added, including instructions on custom company codes
- changes to data type [=ProductId=]: addition of instructions ([[#dt-productid-cas]], [[#dt-productid-inchicode]], [[#dt-productid-custom]])

### API Changes ### {#changelog-2.0.0-api}

- [=Action ListFootprints=]:
    1. rename of [=filter=] HTTP query parameter `filter` to `$filter`
    2. introduce additional allowed `$filter` operators and properties:
        - Additional operators: `eq`, `lt`, `le`, `gt`, `and`, `any`
        - Additional properties: <{ProductFootprint/created}>, <{ProductFootprint/updated}>, <{ProductFootprint/productCategoryCpc}>, <{CarbonFootprint/geographyCountry}>, <{CarbonFootprint/referencePeriodStart}>, <{CarbonFootprint/referencePeriodEnd}>, <{ProductFootprint/companyIds}>, <{ProductFootprint/productIds}>.
    3. Addition of alternative [=Action ListFootprints=] response `HttpStatusCode` 202, and pull-based request/response semantics
    4. pagination is now mandatory. See [[#api-action-list-pagination]]

- [=Action Events=]: section [[#api-action-events]] added

## Version 1.0.1 ## {#changelog-1.0.1}

The following changes have been applied for version 1.0.1

1. Addition of data type {{RegionOrSubregion}}, cleaning up the definition of property <{CarbonFootprint/geographyRegionOrSubregion}>
2. Fix to the JSON representation specification in [[#dt-crosssectoralstandardset-json]]
3. Change to the minimum size of the set [[#dt-productorsectorspecificruleset]] from `0` to `1`, aligning with the overall specification.
4. Removal of unreferenced data type `Boolean` from the data model section
5. Rewording, simplified wording of chapter [[#api-action-auth]]
6. Addition of an authentication flow specification in chapter [[#api-auth]]
7. Improved wording of request parameter `Filter` in section [[#api-action-list-request]]
8. Improved wording in section [[#api-error-responses]], specifically
    - addition of [=error response=] definition
    - improved specification of the [=error response=] JSON representation
    - consolidated specification of overall [=error response=] representation as a HTTP Response
    - improvements to previous subsection "List of error codes", plus merging into overall section [[#api-error-responses]]
    - addition of list of example situations when an [=error response=] is returned
9. Addition of Section [[#api-error-response-example]]
10. Addition of term [=interoperable=] to section [[#terminology]], plus linking to in respective sections
11. Addition of Terms [=UN geographic region=] and [=UN geographic subregion=]
12. Introduction of a new property table layout in section [[#dt-carbonfootprint]] and [[#dt-pf]]
13. Removal of data types `PositiveDecimal`, `SpecVersionString`, `VersionInteger`


<pre class=biblio>
{
  "CE": {
    "authors": [],
    "href": "https://github.com/cloudevents/spec",
    "title": "Cloud Events Specification",
    "status": "LS",
    "publisher": "The Linux Foundation"
  },
  "CE-JSON": {
    "authors": [],
    "href": "https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md",
    "title": "JSON Event Format for CloudEvents - Version 1.0.2",
    "status": "LS",
    "publisher": "The Linux Foundation"
  },
  "CE-Structured-Content-Mode": {
    "authors": [],
    "href": "https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/http-protocol-binding.md#32-structured-content-mode",
    "title": "HTTP Protocol Binding for CloudEvents - Version 1.0.2",
    "status": "LS",
    "publisher": "The Linux Foundation"
  },
  "PATHFINDER-FRAMEWORK": {
    "authors": [],
    "href": "https://wbcsd.github.io/tr/2023/framework-20232601/framework.pdf",
    "title": "Pathfinder Framework: Guidance for the Accounting and Exchange of Product Life Cycle Emissions (Version 2.0)",
    "status": "LS",
    "publisher": "WBCSD"
  },
  "DATA-MODEL-EXTENSIONS": {
    "authors": [],
    "href": "https://wbcsd.github.io/data-model-extensions/spec/",
    "title": "Technical Specification for Data Model Extensions",
    "status": "LS",
    "publisher": "WBCSD"
  },
  "EXTENSIONS-GUIDANCE": {
    "authors": [],
    "href": "https://wbcsd.github.io/data-model-extensions/guidance/",
    "title": "Guidance and Criteria Catalog for Pathfinder Data Model Extensions",
    "status": "LS",
    "publisher": "WBCSD"
  },
  "OPENID-CONNECT": {
    "authors": [],
    "href": "https://openid.net/specs/openid-connect-discovery-1_0.html",
    "title": "OpenID Connect Discovery 1.0 incorporating errata set 1"
  },
  "SI-Unit": {
    "authors": [ "Bureau International des Poids et Mesures" ],
    "href": "https://www.bipm.org/documents/20126/41483022/SI-Brochure-9-EN.pdf/2d2b50bf-f2b4-9661-f402-5f9d66e4b507",
    "title": "The International System of Units (SI) – 9th edition Version 2.01"
  }
}
</pre>

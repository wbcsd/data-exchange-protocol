openapi: 3.1.0
info:
  title: PACT API Specification
  summary: Technical Specifications for PCF Data Exchange
  version: 3.0.0
  contact: 
    name: WBCSD PACT Project
    url: https://github.com/wbcsd
    email: pact@wbcsd.org
  description: |
    This document describes the technical specifications for the exchange of 
    Product Carbon Footprint (PCF) data between systems. The specification is 
    maintained by the WBCSD PACT project and intended to be used by organizations 
    that wish to exchange PCF data with other organizations. The specifications 
    are designed to be technology-agnostic.
tags:
- name: footprint
  description: Synchronous retrieval of footprints
- name: event
  description: Asynchronous Event API. This API is used to post events to the system. 
    Data recipients can request footprints and will receive notifications when these requests are fulfilled or rejected.
    Data owners can post updated and newly published footprints to data recipients.
servers: 
- url: https://example.com
paths:
  /3/footprints:
    get:
      summary: Action ListFootprints
      description: |
        Retrieve a list of Product Carbon Footprints (PCFs) from the [=data owner=].
        The [=data recipient=] can specify various criteria to filter the
        list, and the [=data owner=] can paginate the result set, if necessary.

        Host systems SHOULD implement an access management system and only 
        return the product footprints for which the data owner granted access 
        to the requesting data recipient.

        If the host system has multiple versions of the same footprint with the 
        same `id`, it MUST include only the latest version in the list of
        footprints. The host system SHOULD include preceding footprints which have
        been deprecated in the resulting list of footprints, except if the `status`
        query parameter explicity requests only active footprints.

        ### Pagination

        1. The host system MUST NOT return more product footprints than requested in 
           case a <{listFootprints/limit}> parameter was specified by a [=data recipient=]
        2. The host system MUST return an HTTP `Link` header if there are additional 
           ProductFootprints ready to be retrieved, such that
            - The `Link` header conforms to [[!RFC8288]]
            - The value of the `rel` parameter is equal to `next`
            - the target URI (RFC8288, section 3.1) of the `Link` header is absolute
            - The value of `host` of the target URI is equal to the value of the `host` 
               request header from the original `ListFootprints` HTTP request
        3. The target URI from the `Link` header is called a <dfn>pagination link</dfn>.
        4. A pagination link MUST be valid for at least 180 seconds after creation
        5. The data recipient CAN call the pagination link more than once
        6. Upon each call, the host system
            - MUST return the same set of Product Footprints
            - MUST NOT return more product footprints than requested in case <{listFootprints/limit}> was 
              defined by a [=data recipient=]
            - MUST return a `Link` header conforming with the previous description in case 
              there are additional ProductFootprints available
              ```http
              link: <https://api.example.com/3/footprints?geography=FR&limit=10&offset=10>; rel="next"
              ```
        7. If a response contains a second pagination link and the data recipient has called 
           that second pagination link, the previous pagination link MAY no longer work: data 
           recipients MUST NOT assume that previous pagination links continue to return results 
           after advancing in the pagination process

        ### Filtering

        The [=host system=] MUST support filtering of the list of footprints by 
        criteria described under Parameters. Note that these are the same filters used by the
        [[#action-events-productfootprint-request-created]] Event.

        A host system MAY provide additional filter criteria for the data recipient
        to use. These parameters MUST be prefixed with `x-<identifier>-`.  
        
        For example, to add functionality to search for product 
        footprints based on an invoice number, a software solution could choose 
        to support a parameter `x-atq-invoice-id`. 

        ```http
        /3/footprints/?geography=FR&x-atq-invoice-id=12345&limit=100
        ```

      operationId: listFootprints
      tags: [footprint]
      parameters:
      - name: limit
        description: |
          The maximum number of footprints to return. The [=host system=] MAY return fewer 
          footprints, but MUST return a Link header conforming to [[RFC8288]] if there are 
          additional ProductFootprints ready to be retrieved. 
        in: query
        schema:
          type: integer
          format: uint
          minimum: 0
      - $ref: '#/components/parameters/productId'
      - $ref: '#/components/parameters/companyId'
      - $ref: '#/components/parameters/geography'
      - $ref: '#/components/parameters/classification'
      - $ref: '#/components/parameters/validOn'
      - $ref: '#/components/parameters/validAfter'
      - $ref: '#/components/parameters/validBefore'
      - $ref: '#/components/parameters/status'
      - name: '$filter'
        in: query
        description: |
          Syntax as defined by the ODatav4 specification. Note: this parameter has been deprecated in 3.0.0.
        allowEmptyValue: true
        schema:
          type: string
        deprecated: true
      responses:
        '200':
          description: |
            The host system succesfully returns a list of product footprints. This list 
            MAY be incomplete, in which case the host system MUST return a Link header
            conforming to [[RFC8288]].

            The list MAY also be empty, but MUST NOT be larger than the <{listFootprints/limit}>, if defined.
            If the list is empty, the host system MUST return an empty JSON array.
            The list MUST NOT be NULL.

            ```json
            {
              "data": []
              "data": null // invalid
            }
            ```
          headers:
            link:
              description: Link header to next result set. See Tech Specs section 6.6.1
              schema:
                type: string
                examples:
                - "https://api.example.com/3/footprints?[...]"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    description: List of <{ProductFootprint}> objects.
                    type: array
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/ProductFootprint'
        '400':
          $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          $ref: '#/components/schemas/InternalErrorResponse'
      security:
      - BearerAuth: []
      x-example: |
        ```http 
        HTTP/1.1 200 OK
        content-type: application/json
        link: <https://api.example.com/3/footprints?geography=FR&limit=10&offset=10>; rel="next"

        {
          "data": [ 
            {"id": "079e425a-464f-528d-341d-4a944a1dfd70", ... },
            {"id": "f4b1225a-bd44-4c8e-861d-079e4e1dfd69", ... }
            ...
          ]
        }
        ```
  /3/footprints/{id}:
    get:
      summary: Action GetFootprint
      description: |
        Retrieve a single Product Carbon Footprint (PCF) by its unique identifier.

        Host systems SHOULD implement an access management system and only 
        return the product footprints for which the data owner granted access 
        to the requesting data recipient.
      operationId: getFootprintById
      tags: [footprint]
      parameters:
      - name: id
        description: The value of property id of a product footprint a data recipient intends to retrieve.
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    description: |
                      The product footprint requested, see <{ProductFootprint}>.
                    $ref: '#/components/schemas/ProductFootprint'
        '400':
          $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: The data recipient is not allowed to access the requested ProductFootprint.
          $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: The requested ProductFootprint was not found.
          $ref: '#/components/schemas/NotFoundResponse'
        '500':
          $ref: '#/components/schemas/InternalErrorResponse'
      security:
      - BearerAuth: []
  /3/events:
    post:
      summary: Action Events
      description: |
        The Action Events endpoint supports for the following use cases:

        1. enabling a [=data owner=] to notify a [=data recipient=] on 
           updates to 1 or more [[#dt-pf|Product Footprints]] (see [[#api-action-events-case-1]])
        2. enabling a [=data recipient=] to request [[#dt-pf|product footprints]] 
           from a [=data owner=] by sending an event to the [=data owner's=] [=Action Events=] 
           endpoint (see [[#api-action-events-case-2]]).

        The Action Events endpoint accepts CloudEvent events (see [[!CE]]) encoded 
        in "Structured Content Mode" (see [[!CE-Structured-Content-Mode]].

        The following events MUST be handled by the host system:
        - RequestCreatedEvent
        - RequestFulfilledEvent
        - RequestRejectedEvent
        - PublishedEvent

        A [=host system=] SHOULD only accept events after authentication (see [[#api-auth]]).

        A host system MUST validate the event and return an HTTP 4xx status code if the
        event is invalid. 

        Upon accepting the event, the [=host system=] MUST return an HTTP 200 status code
        and SHOULD return an empty response body. 

      operationId: post_event
      tags: [event]
      requestBody:
        content:
          application/cloudevents+json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/RequestCreatedEvent'
              - $ref: '#/components/schemas/RequestFulfilledEvent'
              - $ref: '#/components/schemas/RequestRejectedEvent'
              - $ref: '#/components/schemas/PublishedEvent'
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          $ref: '#/components/schemas/NotFoundResponse'
        '500':
          $ref: '#/components/schemas/InternalErrorResponse'
      security:
      - BearerAuth: []
components:
  schemas:
    ProductFootprint:
      description: |
        `ProductFootprint` is a data type which represents the carbon footprint
        of a product under a specific scope ([[#dt-carbonfootprint-scope]])
        and with values calculated in accordance with the [=PACT Methodology=].

        The objective of a `ProductFootprint` is to provide interoperability between
        the creator (the [=data owner=]) and the consumer (the [=data recipient=]) of
        ProductFootprints. The details on the exchange of ProductFootprints are
        specified in [[#api]].

        Conceptually, the data type <{ProductFootprint}> is modeled as a multi-purpose
        container for product-specific emissions factors which is supported by
        extensibility through [=Data Model Extensions=].

        Data Model Extensions enable [=data owners=] to exchange additional information
        related to a product with [=data recipients=]. The details are specified
        in [[#datamodelextension]] as well as [[!EXTENSIONS-GUIDANCE]], and [[!DATA-MODEL-EXTENSIONS]].

        Each `ProductFootprint` can and should be updated over time, for instance to
        incorporate new or refined data from [=data owners=] (see [[#lifecycle]]).
      summary: |
        The ProductFootprint represents the footprint of a product.
      type: object
      title: ProductFootprint
      required:
      - id
      - specVersion
      - version
      - created
      - status
      - companyName
      - companyIds
      - productDescription
      - productIds
      - productNameCompany
      - pcf
      properties:
        id:
          description: |
            A unique identifier that a system uses to refer to the entire dataset of the PCF. 
            This is typically an automatically-generated number by the solution to maintain 
            the required technical references to data within the system. 
          $ref: '#/components/schemas/UUID'
          examples:
          - "f4b1225a-bd44-4c8e-861d-079e4e1dfd69"
        specVersion:
          description: |
            The version of the PACT Tech Specs that the data being shared complies with. 
            This is a string in the format of "major.minor.patch" (e.g. "3.0.0").
          type: string
          pattern: '^\d+\.\d+\.\d+(-\d{8})?$'
          examples:
          - "3.0.0"
        precedingPfIds:
          description: |
            A given PCF may change over time, due to updates to the calculation. 
            This is a list of ID's that reflect "past versions" of the current PCF,
            maintained by the solution. 

            See [[#lifecycle]] for details.
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          uniqueItems: true
          examples:
          - ["f4b1225a-bd44-4c8e-861d-079e4e1dfd69", 
             "079e425a-464f-528d-341d-4a944a1dfd70"]
        version:
          description: |
            The version number of the PCF. Starting 3.0, any change to a
            PCF will generate a new ID, so this field is no longer needed.
            
            See [[#lifecycle]] for details.
          note: Deprecated in 3.0. MUST be 1.
          type: integer
          format: int32
          minimum: 0
        created:
          description: |
            The date and time when the PCF was created. This is typically an automatically 
            generated field by the solution. It SHOULD NOT be used to derive status of 
            validity of the PCF. 

            See [[#lifecycle]] for details.
          type: string
          format: date-time
          examples:
          - '2024-10-31T00:00:00Z'
        updated:
          description: |
            The date and time when the PCF was last updated. Starting 3.0  any change to 
            a PCF will generate a new ProductFootprint, which is immutable, leaving 
            the updated property redundant.
            
            See [[#lifecycle]] for details.
          note: Deprecated in 3.0.
          type: string
          format: date-time
        status:
          description: |
            The status of the PCF. `Active` means that the PCF is the most recent version 
            and is the one that SHOULD be used by a data recipients, e.g. for product 
            footprint calculations. `Deprecated` means that the PCF is no longer 
            the most recent version and SHOULD NOT be used by data recipients.
            
            See [[#lifecycle]] for details.
          type: string
          enum:
            - Active
            - Deprecated
          examples: 
          - Active
        validityPeriodStart:
          description: |
            The start date of the <dfn>validity period</dfn>: time interval during which the 
            ProductFootprint is declared as valid for use by a receiving [=data recipient=].
            
            If no validity period is specified, the ProductFootprint is valid for 3 years after
            the <{CarbonFootprint/referencePeriodEnd}>

            See [[#validity-period]] for details.
          summary: |
            The start date and time of the validity period. The period of time between the 
            validityPeriodStart and validityPeriodEnd is defined as the "validity period", 
            and represents the time period during which the PCF is valid. Specifying the 
            validity period is optional. If this is not specified, then it is assumed the 
            PCF is valid for 3 years, starting from the referencePeriodEnd. 

          type: string
          format: date-time
        validityPeriodEnd:
          description: |
            The end date and time of the validity period. After this date the ProductFootprint
            is not valid for use anymore. See [[#validity-period]] for more details.
          type: string
          format: date-time
        companyName:
          description: |
            The name of the company that is the PCF Data Owner
          $ref: '#/components/schemas/NonEmptyString'
        companyIds:
          description: |
            The non-empty set of Uniform Resource Names ([[!RFC8141|URN]]). Each value of 
            this set is supposed to uniquely identify the ProductFootprint Data Owner. 
            TODO: See Company Identifier section for details
          summary: |
            A list of company identifiers which represent the companies that are considered 
            data owners of the PCF. In a large organization, this may include multiple
            subsidiaries or legal entities of a given corporation, hence the need to provide 
            multiple identifiers. A list of only one identifier is also valid. The format 
            of each companyID MUST be provided as a Uniform Resource Names ([[!RFC8141|URN]]),
            which helps ensure the data provided is standardized and can be interpreted by the 
            receiving system.
          examples:
          - ["urn:company:example:company1"]
          - ["urn:company:example:company1","urn:company:example:company2"]
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Urn'
        productDescription:
          description: |
            The free-form description of the product, including any additional relevant information 
            such as production technology, packaging, process, feedstock and technical parameters 
            (e.g. dimensions). Products which are services (i.e. consulting) should include a short
            description of the service.
          type: string
        productIds:
          description: |
            The non-empty set of [=ProductIds=] in [=URN=] format. Each of the values in the set is 
            supposed to uniquely identify the product. See {#product-identifiers} for syntax and 
            examples.
          summary: |
            All relevant product identifiers to identify the product for which the provided 
            PCF was calculated (e.g. supplier part number, GTIN, article number, batch number, etc.)
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Urn'
        productClassifications:
          description: |
            The non-empty set of [=ProductClassifications=] in [=URN=] format. Each of the values in the set can classify the product as part of distinct groupings and categorizations. See {#product-identifiers}. 
          note: Replaces productCategoryCpc deprecated in 2.3
          summary: |
            A list of classification or category identifiers in URN format. Use well known urn's here, 
            or adhere to recommended urn:pact: format. For example UN CPC, CAS Numbr, CN Code etc.
            
            This replaces the productCategoryCpc property from 2.0.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Urn'
          examples:
          - ["urn:pact:productclassification:un-cpc:1234"]
          - ["urn:pact:productclassification:un-cpc:1234", "urn:pact:productclassification:cas:1234"]
        productNameCompany:
          description: |
            The name with which the company producing the product refers to it, i.e. the product's trade name.
            Recognizable by the receiver of the PCF information.
          $ref: '#/components/schemas/NonEmptyString'
        comment:
          description: |
            Additional information related to the product footprint.

            Whereas the property <{ProductFootprint/productDescription}> contains product-level information, <{ProductFootprint/comment}> SHOULD be used for information and instructions related to the calculation of the footprint, or other information which informs the ability to interpret, to audit or to verify the Product Footprint.
          note: optional in 3.0, was mandatory in 2.x 
          summary: |
            Any additional information related to the PCF. Whereas the property productDescription 
            contains product-level information, comment should be used for information and instructions 
            related to the calculation of the PCF, or other information which informs the ability to interpret
            (e.g. LUC not included as unable to calculate LUC), to audit, or to verify the PCF.

            Information explaining the current status of the PCF, what was changed since the last version, etc. If the PCF was changed since a previous version, indicate all methodological and/or production process change(s) that occurred to result in the PCF change. For example, include the relevant change(s) from the list below:

            1. In case product or sector specific guidance used does not align with PACT Methodology's requirement, the areas of disalignment should be specified in the comment section (e.g. allocation rules, exemption rules, data quality metrics).

            2. Information explaining the current status of the PCF, what was changed since the last version, etc. If the PCF was changed since a previous version, indicate all methodological and/or production process change(s) that occurred to result in the PCF change. E.g., include the relevant change(s) from the list below: 

            Methodological:
             - Access to new Emission Factor data (database, supplier-specific, company-specific)
             - Updated upstream data (i.e. upstream supplier updated their PCF based on methodology change)
            Production Process:
             - Change in process
             - Change in feedstock
             - Change from conventional to certified sustainable material
             - Change in energy source
             - Change in upstream supplier
             - Updated upstream data (i.e. upstream supplier updated their PCF based on process change)

             3. Additional information on biogenic emissions & removals calculation  should be specified. This includes information on tools used for  calculations (e.g. Cool Farm Tool), and methodological choices made in calculation of biogenic emissions and removals (e.g. Statistical  or Direct Land use change calculation for DLUC calculations). 
          type: string
        pcf:
          description: |
            The carbon footprint of the given product with value conforming to the data 
            type <{CarbonFootprint}>.
          summary:
            The carbon footprint of the given product.
          $ref: '#/components/schemas/CarbonFootprint'
        extensions: 
          type: array
          description: |
            If defined, 1 or more data model extensions associated with the ProductFootprint.
            See <{DataModelExtension}> for details.
          items: 
            $ref: '#/components/schemas/DataModelExtension'

    CarbonFootprint:
      description: |
        A CarbonFootprint represents the carbon footprint of a product and related data in accordance with the [=PACT Methodology=].

        ### Scope of a CarbonFootprint ### {#dt-carbonfootprint-scope}

        Each CarbonFootprint is scoped by
        1. Time Period: the time period is defined by the properties <{CarbonFootprint/referencePeriodStart}> and <{CarbonFootprint/referencePeriodEnd}> (see [=PACT Methodology=] section 6.1.2.1)
        2. Geography: further set by the properties <{CarbonFootprint/geographyRegionOrSubregion}>, <{CarbonFootprint/geographyCountry}>, and <{CarbonFootprint/geographyCountrySubdivision}> (see [=PACT Methodology=] section 6.1.2.2)

        If a CarbonFootprint
        1. Has geographical granularity `Global`, then the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
        2. Has a regional or sub-regional geographical granularity, then the property <{CarbonFootprint/geographyRegionOrSubregion}> MUST be `defined` and the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
        3. Has a country-specific geographical granularity, then property <{CarbonFootprint/geographyCountry}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
        4. Has a country subdivision-specific geographical granularity, then property <{CarbonFootprint/geographyCountrySubdivision}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountry}> MUST be `undefined`.
      summary: |
        The CarbonFootprint represents the carbon footprint of a product and related data 
        in accordance with the PACT Methodology.
      title: CarbonFootprint
      type: object
      required:
      - declaredUnitOfMeasurement
      - declaredUnitAmount
      - productMassPerDeclaredUnit
      - referencePeriodStart
      - referencePeriodEnd
      - pcfExcludingBiogenicCO2Withdrawal
      - pcfIncludingBiogenicCO2Withdrawal
      - fossilGhgEmissions
      - fossilCarbonContent
      - biogenicCarbonContent
      - ipccCharacterizationFactors
      - crossSectoralStandards
      - exemptedEmissionsPercent
      # oneOf:
      # - oneOf:
      #   - required:
      #     - geographyRegionOrSubregion
      #   - required:
      #     - geographyCountry
      #   - required:
      #     - geographyCountrySubdivision
      # - not:
      #     anyOf:
      #     - required:
      #       - geographyRegionOrSubregion
      #     - required:
      #       - geographyCountry
      #     - required:
      #       - geographyCountrySubdivision
      properties:
        declaredUnitOfMeasurement:
          description: |
            The unit of measurement of the product. Together with `declaredUnitAmount` 
            this defines the 'declared unit' of the product. Emissions in this carbon 
            footprint are expressed in kgCO2e per 'declared unit'. 

            For example: a PCF for a 12 liter bottle of Ethanol states 2 kg of CO2e in 
            emissions. In this case the declared unit is 12 liter Ethanol, thus the
            `declaredUnitOfMeasurement` is 'liter', and the `declaredUnitAmount` is 12.
          type: string
          enum:
            - liter
            - kilogram
            - cubic meter
            - kilowatt hour
            - megajoule
            - ton kilometer
            - square meter
            - piece
            - hour
            - megabit second
        declaredUnitAmount:
          description: |
            The amount of <{CarbonFootprint/declaredUnitOfMeasurement|units}> contained
            within the product to which the [[#carbonfootprint|PCF]] is referring. 

            For example: if the product is a car door weighing 80kg, `declaredUnitAmount` 
            will be `80` and `declaredUnitOfMeasurement` will be `kilogram`.
          summary: |
            The amount of units contained within the product to which the PCF refers. 
            This is not representing the total annual quantity supplied (e.g. if the product is 
            supplied in bulk in kg, which is the declared unit selected, the value MUST be 1)
            
          x-unit: declared unit       
          $ref: '#/components/schemas/PositiveNonZeroDecimal'
        productMassPerDeclaredUnit:
          description: |
            The mass (in kg) of the product excluding packaging. The 'declared unit' is
            the `declaredUnitAmount` times `declaredUnitOfMeasurement`.

            For example, if the declared unit is `piece`, this attribute MUST be populated 
            with the mass of `declaredUnitAmount` pieces of the product. If the declared unit
            is `liter`, this attribute MUST be populated with the mass of `declaredUnitAmount` 
            liters of the product.

            If the product mass is not relevant (i.e. PCF is for an energy (kWh, MJ), 
            logistics (ton.km) or service related product), this attribute SHOULD be populated 
            with `0`.          
          note: mandatory in 3.0, optional in v2.x
          $ref: '#/components/schemas/Decimal'
        pcfExcludingBiogenicCO2Withdrawal:
          description: |
            The PCF of the product including:
            - all emissions from fossil sources
            - all biogenic and land management-related CH4,  N2O, non-biogenic CO2, HFCs and PFCs emissions
            - land management CO2 removals
            Excluding: 
            - all biogenic CO2 withdrawals.
          x-unit: kgCO2e/declared unit
          x-comment: | 
            PCF (Excl. biogenic CO2 withdrawal) = fossilGhgEmissions + landUseChangeGhgEmissions + landManagementBiogenicCO2Emissions + biogenicNonCO2Emissions + landManagementBiogenicCO2Removals
          x-rule: M3, M2-2025
          $ref: '#/components/schemas/Decimal'
        pcfIncludingBiogenicCO2Withdrawal:
          description: |
            The PCF of the product including: 
            - all emissions from fossil sources
            - all biogenic and land management-related CH4,  N2O, non-biogenic CO2, HFCs and PFCs emissions
            - land management CO2 removals
            - all biogenic CO2 withdrawals.          
          x-unit: kgCO2e/declared unit
          x-comment: |
            PCF (Incl. biogenic CO2 withdrawal) = FossilGHGEmissions + landUseChangeGHGEmissions + landManagementBiogenicCO2Emissions + biogenicNonCO2Emissions + landManagementBiogenicCO2Removals + biogenicCO2Withdrawal
          x-rule: M3, M2-2025
          $ref: '#/components/schemas/Decimal'
        fossilGhgEmissions:
          description: |
            The emissions from fossil sources as a result of fuel combustion, from 
            fugitive emissions, and from process emissions. 
            
            Expressed in kgCO2e per declared unit. 
          summary: |
            The emissions from fossil sources as a result of fuel combustion, from fugitive 
            emissions, and from process emissions. 
          x-unit: kgCO2e/declared unit
          x-rule: M
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        fossilCarbonContent:
          description: |
            The fossil carbon content of the product (mass of carbon). 
          x-unit: kgC/declared unit
          x-rule: M
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        biogenicCarbonContent:
          description: |
            The biogenic carbon content of the product (mass of carbon). 
          x-unit: kgC/declared unit
          x-rule: M
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landUseChangeGhgEmissions:
          description: |
            GHG emissions from land-use change, such as deforestation or conversion
            from natural forest to plantation forest, that cause carbon stock loss. 
          x-unit: kgCO2e/declared unit
          x-rule: M3, M2-2025
          x-comment: Replaces dLucGhgEmissions
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landCarbonLeakage:
          description: |
            Indirect land use change due to carbon stock losses from conversion of native 
            ecosystems to agricultural land to replace food production.
          x-unit: kgCO2e/declared unit
          x-comment: Replaces iLucGhgEmissions
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landManagementBiogenicCO2Emissions:
          description: |
            Biogenic CO2 emissions occurring due to recurring land management actions on 
            land within the same land-use category.
          x-unit: kgCO2e/declared unit
          x-rule: M3-2027
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landManagementBiogenicCO2Removals:
          description: |
            CO2 removals resulting from a net increase in carbon stored in land-based carbon 
            pools (e.g. reforestation and afforestation). Subject to traceability requirements.
          x-unit: kgCO2e/declared unit
          $ref: '#/components/schemas/NegativeOrZeroDecimal'
        biogenicCO2Withdrawal:
          description: |
            Net CO2 uptake of biomass in the product. Withdrawals are expressed in 
            kgCO2e per declared unit, equal to or less than zero.
          x-unit: kgCO2e/declared unit
          x-rule: M3, M2-2025
          $ref: '#/components/schemas/NegativeOrZeroDecimal'
          x-comment: Replaces biogenicCarbonWithdrawal
        biogenicNonCO2Emissions:
          description: |
            Biogenic Non-CO2 emissions (e.g. CH4 & N2O) caused by combustion of biofuels 
            and composting of biowaste, including agricultural land management activities 
            such as manure fertilization and  enteric emissions.
          x-unit: kgCO2e/declared unit
          x-rule: M3, M2-2025
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        uncertifiedLandManagementCO2Removals:
          description: |
            Uncertified land management CO2 removals.
          x-unit: kgCO2e/declared unit
          x-rule: M2-2025
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        aircraftGhgEmissions:
          description: |
            If present, the GHG emissions resulting from aircraft engine usage for the transport of the product, excluding radiative forcing.            
          x-unit: kgCO2e/declared unit
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        packagingGhgEmissions:
          description: |
            Emissions resulting from the packaging of the product. MUST be undefined if packaging emissions are not included.
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
          x-unit: kgCO2e/declared unit
        outboundLogisticsGhgEmissions:
          description: |
            Emissions resulting from outbound logistics. MUST be undefined if outbound logistics emissions are not included.
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
          x-unit: kgCO2e/declared unit
        ccuCarbonContent:
          description: |
            The amount of captured carbon (both biogenic and fossil) during CCU (Carbon Capture & Usage) in the production.
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
          x-unit: kgC/declared unit
        ccuOrigin:
          description: |
            Information about the origin (fossil or biogenic) and path of the captured CO2 used in CCU, including the name and location of the capture facility. This information enhances transparency and traceability, enabling tracking of CO2 across the value chain.        
          type: string
        ccuCalculationApproach:
          description: |
            The calculation approach for CCU: "Cut-off" or "Credit." See [=PACT Methodology=] for details.
          type: string
          enum:
            - Cut-off
            - Credit 
        ccuCreditCertification:
          description: |
            (Only for Credit Approach) a URL to documentation verifying the certification from an external bookkeeping scheme. 
            This attribute ensures the reliability and avoids double counting of credits within the crediting system.
          $ref: '#/components/schemas/Uri' 
        landAreaOccupation:
          description: |
            Amount of agricultural land occupied in reporting year to produce the product.
          x-unit: (m2/annum) / declared unit
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        ipccCharacterizationFactors:
          description: |
            The characterization factors from one or more IPCC Assessment Reports used in the calculation of the PCF (see [=PACT Methodology=] Section 3.2.2).
            It MUST be a non-empty set of strings with the format `AR$VERSION$`, where `$VERSION$` stands for the
            IPCC report version number and MUST be an integer.

            Per the Methodology the latest available characterization factor version shall be used, i.e., `["AR6"]`. In the event this is not possible, include the set of all characterization factors used.
          note: supersedes `characterizationFactors` deprecated in 2.3.
          summary: |              
            The IPCC (Intergovernmental Panel of Climate Change) frequently releases (GWP) 
            global warming potential values for climate gases related to CO2. These GWP 
            values are released in Assessment Reports (AR), which are numbered. 
            
            The AR number can be used to track the age and accuracy of the GWP values used
            in reporting. This field indicates the IPCC version of the GWP characterization 
            factors used in the calculation of the PCF.

            Per the PACT Methodology, the latest available characterization factor version 
            shall be used, i.e., [""AR6""]. In the event this is not possible, include the 
            set of all characterization factors used.
          type: array
          items:
            type: string
            pattern: '^AR\d+$'
          minItems: 1
          uniqueItems: true
          examples:
          - ["AR6"]
          - ["AR5", "AR6"]
        crossSectoralStandards:
          description: |
            The cross-sectoral standards applied for calculating or allocating [=GHG=] emissions.

            It MUST be a non-empty array and SHOULD contain only the following values without duplicates:

              : `ISO14067`
              :: for the ISO 14067 Standard, "Greenhouse gases — Carbon footprint of products — Requirements and guidelines for quantification"
              : `ISO14083`
              :: for the ISO 14083 Standard, "Greenhouse gases — Quantification and reporting of greenhouse gas emissions arising from transport chain operations"
              : `ISO14040-44`
              :: for the ISO 14040-44 Standard, "Environmental management — Life cycle assessment — Principles and framework"
              : `GHGP-Product`
              :: for the Greehouse Gas Protocol (GHGP) Product Standard
              : PEF
              :: for the EU Product Environmental Footprint Guide
              : `PACT-1.0`
              : `PACT-2.0`
              : `PACT-3.0`
              :: for a given version of the [=PACT Methodology=]. It is recommended to use the latest version of the Methodology.
              : PAS2050
              :: for the Publicly Available Specification (PAS) 2050, "Specification for the assessment of the life cycle greenhouse gas emissions of goods and services". The use of this standard is permitted but not recommended.

            The enumeration of standards above CAN evolve in future revisions. A host system MUST accept ProductFootprints from later revisions with `crossSectoralStandards` containing values that are not defined in this specification.
          note: Supersedes `crossSectoralStandardsUsed` deprecated in version 2.3.
          summary: |
            The cross-sectoral standards applied for calculating or allocating GHG 
            emissions. If multiple apply, list all.
          type: array
          items:
            type: string
            enum:
              - ISO14067
              - ISO14083
              - ISO14040-44
              - GHGP-Product
              - PEF
              - PACT-1.0
              - PACT-2.0
              - PACT-3.0
          minItems: 1
          uniqueItems: true
          examples:
          - [ISO14067, PACT-3.0]
        productOrSectorSpecificRules:
          description: |
            The product-specific or sector-specific rules applied for calculating or allocating GHG emissions. If no product or sector specific rules were followed, this set MUST be empty.
          summary: |
            The product-specific or sector-specific rules applied for calculating or 
            allocating GHG emissions. Sector specific guidance frameworks, such as 
            Product Category Rules (PCR), are sets of rules for how to calculate and 
            document Life Cycle Assessments. They provide product category specific
            guidance and enhance comparability between assessments of the different 
            suppliers for the same category (sector). The same applies to Product 
            Environmental Footprint Category Rules (PEFCR)).  If no rules were used, 
            leave this field empty.
          type: array
          items:
            $ref: '#/components/schemas/ProductOrSectorSpecificRule'
          minItems: 1
          uniqueItems: true
          note: Multiple ProductOrSpecificRules can be specifed, each with its own operator and ruleNames.
          examples: 
          -  
            - operator: PEF
              ruleNames:
              - "PEF 1.0"
              - "PEF 2.0"
            - operator: PCR
              ruleNames:
              - "PCR-A"
        biogenicAccountingMethodology:
          description: |
            UNDER DISCUSSION
          type: string
        boundaryProcessesDescription:
          description: |
            Brief description of the processes attributable to each life cycle stage included 
            in the PCF (e.g. electricity consumption for manufacturing), especially those 
            that significantly contribute manufacturing steps of the product (including 
            general description of used technologies).
          note: optional in 3.0, was mandatory in 2.x
          type: string
        referencePeriodStart:
          description: |
            The start (including) of the time boundary for which the PCF value
            is considered to be representative. Specifically, this start date
            represents the earliest date from which activity data was collected
            to include in the PCF calculation. 

            See the [=PACT Methodology=] section 6.1.2.1 for further details. 
            Can also be referred to as 'reporting period'.
          summary: |
            The start date and time of the earliest activity data used to calculate the 
            PCF. This start date can be considered the start of the period over which 
            the given PCF is referencing, or reporting on.
          type: string
          format: date-time
        referencePeriodEnd:
          description: |
            The end (excluding) of the time boundary for which the PCF value is
            considered to be representative. Specifically, this end date
            represents the latest date from which activity data was collected
            to include in the PCF calculation. Can al

            See the [=PACT Methodology=] section 6.1.2.1 for further details. 
            Can also be referred to as 'reporting period'.
          summary: |
            The end date and time of the latest activity data used to calculate the PCF. 
            This end date can be considered the end of the period over which the given 
            PCF is referencing, or reporting on.
          type: string
          format: date-time
        geographyRegionOrSubregion:
          description: |
            If present, the value MUST conform to data type {{RegionOrSubregion}}. See [[#dt-carbonfootprint-scope]] for further details. Additionally, see the [=PACT Methodology=] Section 6.1.2.2.

          summary: |
            The geographic representation of the PCF may be reported at different 
            levels of granularity, depending on the preference of the data owner 
            (e.g., at a plant, region, or country level). This attribute specifies 
            the geographic region to which the PCF refers, i.e. "Africa", 
            "Central Asia", etc.
          type: string
          enum:
            - Africa
            - Americas
            - Asia
            - Europe
            - Oceania
            - Australia and New Zealand
            - Central Asia
            - Eastern Asia
            - Eastern Europe
            - Latin America and the Caribbean
            - Melanesia
            - Micronesia
            - Northern Africa
            - Northern America
            - Northern Europe
            - Polynesia
            - South-eastern Asia
            - Southern Asia
            - Southern Europe
            - Sub-Saharan Africa
            - Western Asia
            - Western Europe
          examples: 
          - "Eastern Asia"
          - "Southern Europe"
        geographyCountry:
          description: |
            If present, the value MUST conform to data type [=ISO3166CC=]. See [[#dt-carbonfootprint-scope]] for further details.
          summary: |
            The geographic representation of the PCF may be reported at different levels
            of granularity, depending on the preference of the data owner (e.g., at a 
            plant, region, or country level). This field indicates the country to which 
            the PCF refers. The country name must be according to ISO 3166-2 alpha-2 
            country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
          type: string
          pattern: '^[A-Z]{2}$'
          comment: ISO 3166-1 alpha-2
          examples:
            - US
            - DE
        geographyCountrySubdivision:
          description: |
            If present, a ISO 3166-2 Subdivision Code. See [[#dt-carbonfootprint-scope]] for further details.
          summary: |
            The geographic representation of the PCF may be reported at different 
            levels of granularity, depending on the preference of the data owner 
            (e.g., at a plant, region, or country level). This attribute represents 
            the most granular (i.e. "most specific") geography, i.e. the specific 
            subdivision within a given country, for example New York State within 
            the USA. Follows ISO 3166-2.
          type: string
          pattern: '^[A-Z]{2}-[A-Z0-9]{1,3}$'
          comment: ISO 3166-2
          examples:
            - US-CA
            - DE-BW
        secondaryEmissionFactorSources:
          description: |
            If secondary data was used to calculate the <{CarbonFootprint}>, then it MUST include the property <{CarbonFootprint/secondaryEmissionFactorSources}> with value the emission factors used for the <{CarbonFootprint}> calculation.

            If no secondary data is used, this property MUST BE undefined.
          summary: |
            The list of secondary data sources and versions which have been used by 
            the data owner for the PCF calculation (e.g. databases such as ecoinvent)

            If no secondary data is used, this property MUST BE undefined.
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/EmissionFactorSource'
          examples:
          -
            - name: ecoinvent
              version: "3.7"          
        exemptedEmissionsPercent:
          description: |
            The percentage of emissions excluded from PCF, expressed as a decimal number. See [=PACT Methodology=].
          note: string<decimal> in 3.0, was Number in 2.x. Removed upper boundary of 5%.
          $ref: '#/components/schemas/Decimal'
        exemptedEmissionsDescription:
          description: |
            Rationale behind exclusion of specific PCF emissions, CAN be the empty string if no emissions were excluded.
          summary: |
            If emissions exempted, rationale behind exclusion of specific PCF emissions.
          note: optional in 3.0, was mandatory in 2.x
          type: string
        allocationRulesDescription:
          description: |
            If present, a description of any allocation rules applied and the rationale explaining how the selected approach aligns with [=PACT Methodology=] rules (see Section 3.3.1.4).
          summary: |
            Description of the allocation rules applied to the PCFs foreground data 
            including an explanation of the underlying reasons (way of allocating 
            all activities from your manufacturing steps to the declared unit).
          type: string
        primaryDataShare:
          description: |
            The share of primary data in percent. See the [=PACT Methodology=].

            For reference periods ending before the beginning of year 2025, at least property <{CarbonFootprint/primaryDataShare}> or propery <{CarbonFootprint/dqi}> MUST be defined.

            For reference periods including the beginning of year 2025 or after, this property MUST be defined.

          note: string<decimal> in 3.0, was Number in 2.x
          x-rule: M2-2025, M3
          summary: |
            Share of primary data in the final PCF, calculated according to 
            the PACT Methodology.
          $ref: '#/components/schemas/Decimal'
        dqi:
          description: |
            If present, the Data Quality Indicators (dqi) in accordance with the [=PACT Methodology=] Sections 4.2.1 and 4.2.3, Appendix B.

            For reference periods ending before the beginning of year 2025, at least property <{CarbonFootprint/primaryDataShare}> or propery <{CarbonFootprint/dqi}> MUST be defined.

            For reference periods including the beginning of year 2025 or after, this property MUST be defined.
          x-rule: M2-2025, M3
          summary: |
            Data Quality Indicators (dqi) in accordance with the PACT Methodology. 
          $ref: '#/components/schemas/DataQualityIndicators'
        verification:
          description: |
            The presence of the <{Verification}> object indicates whether or not the <{CarbonFootprint}> has
            been verified in line with [=PACT Methodology=] requirements
          $ref: '#/components/schemas/Verification'

    DataModelExtension:
      title: DataModelExtension
      description: |
        Each data model extension MUST be a valid JSON object conforming with the
        [JSON Representation of a Data Model Extension](https://wbcsd.github.io/data-model-extensions/spec/#instantiation).

        See [[!DATA-MODEL-EXTENSIONS]] for technical details and [[!EXTENSIONS-GUIDANCE]] for data model extension guidance.
      example: |
        Example imaginary Data Model Extension for encoding shipment-related data, encoded in JSON:
        ```json
        {
          "specVersion": "2.0.0",
          "dataSchema": "https://reg.carbon-transparency.org/shipment/1.0.0/data-model.json",
          "data": {
            "shipmentId": "S1234567890",
            "consignmentId": "Cabc.def-ghi",
            "shipmentType": "PICKUP",
            "weight": 10,
            "transportChainElementId": "ABCDEFGHI"
          }
        }
        ```
      type: object
      required:
      - specVersion
      - dataSchema
      - data
      properties:
        specversion:
          type: string
          description: |
            The version of the Data Model Extension specification. The value 
            MUST be a string in the format major.minor.patch as defined in 
            Semantic Versioning 2.0.0.
        dataSchema:
          type: string
          format: uri
          description: |
            The value MUST be the URL to the publicly accessible Extension Schema File
        documentation:
          type: string
          format: uri
          description: |
            The value MUST be the URL to the publicly accessible Extension Documentation.
        data:
          type: object
          description: |
            The value MUST be a JSON Object that conforms to the extension schema file 
            referenced by the dataSchema property.

    ProductOrSectorSpecificRule:    
      title: ProductOrSectorSpecificRule
      description: |
        A ProductOrSectorSpecificRule refers to a set of product or sector specific rules published by a specific operator and applied during product carbon footprint calculation.
      type: object
      required:
      - operator
      - ruleNames
      properties:
        operator:
          description: |
            Selection of operator of PCR being used for the PCF calculation. If 
            operator is not available in the given list, or if you have followed
            a sector specific guidance, please select "Other" and include details 
            under "otherOperatorName".
          type: string
          enum:
            - PEF
            - EPD International
            - Other
          examples:
            - PEF
            - Other
        ruleNames:
          description: |
            Names of the product or sector specific rules being used for the PCF 
            calculation.
          type: array
          items:
            type: string
            minLength: 1
          minItems: 1
          uniqueItems: true
          examples:
            - [PEF 1.0, PEF 2.0]
        otherOperatorName: 
          description: |
            If operator is Other, then this attribute must be populated with the name 
            of the operator.
          type: string
          minLength: 1
      example: |
          ```json
          {
            "operator": "PEF",
            "ruleNames": [
              "PEF 1.0",
              "Other"
            ]
          }
          ```
    EmissionFactorSource:
      title: EmissionFactorSource
      description: |
        References emission factor databases, see [=PACT Methodology=] Section 4.1.3.2.

        ```json
        {
          "name": "ecoinvent",
          "version": "3.9.1"
        }
        ```      
      type: object
      required:
      - name
      - version
      properties:
        name:
          description: |
            Name of the secondary emission factor database
          $ref: '#/components/schemas/NonEmptyString'
          examples:
            - ecoinvent
        version:
          description: |
            Version of the secondary emission factor database
          $ref: '#/components/schemas/NonEmptyString'
          examples:
            - 3.9.1

    DataQualityIndicators:
      description: | 
        Data type DataQualityIndicators contains the quantitative data quality indicators in conformance with PACT Methodology Section 4.2.3 and Appendix B.

        Each property is optional until the reference period includes the beginning of calendar year 2025, or later, when all properties MUST be defined.
      example: |
        Example value for the case that all DQIs are known but no coverage after exemption assessment performed:

        ```json
        {
          "technologicalDQR": "2.0",
          "temporalDQR": "2.0",
          "geographicalDQR": "2.0",
          "completenessDQR": "2.0",
          "reliabilityDQR": "2.0"
        }
        ```        
      title: DataQualityIndicators
      type: object
      required:
      - technologicalDQR
      - temporalDQR
      - geographicalDQR
      properties:
        technologicalDQR:
          description: |
            Quantitative data quality rating (DQR) based on the data quality matrix (See [=PACT Methodology=]),
            scoring the technological representativeness of the sources used for PCF calculation based on
            weighted average of all inputs.

            The value MUST be between `1` and `5` inclusive.

          note: string<decimal> in 3.0, was Number in 2.x
          $ref: '#/components/schemas/Decimal'
        temporalDQR:
          description: |
            Quantitative data quality rating (DQR) based on the data quality matrix (See [=PACT Methodology=]),
            scoring the temporal representativeness of the sources used for PCF calculation based on
            weighted average of all inputs.

            The value MUST be between `1` and `5` inclusive.
          note: string<decimal> in 3.0, was Number in 2.x
          $ref: '#/components/schemas/Decimal'
        geographicalDQR:
          description: |
            Quantitative data quality rating (DQR) based on the data quality matrix (See [=PACT Methodology=]),
            scoring the geographical representativeness of the sources used for PCF calculation
            based on weighted average of all inputs.

            The value MUST be between `1` and `5` inclusive.
          note: string<decimal> in 3.0, was Number in 2.x
          $ref: '#/components/schemas/Decimal'
    Verification:
      title: Verification
      description: |
        Data type `Verification` contains the verification in conformance with [=PACT Methodology=].
      summary: |
        Contains the verification in conformance with PACT Methodology.
      note: Renamed from 'Assurance' in 3.0
      example: |
        Example value for the case that 42% of the product’s overall GHG emissions covered by the data quality assessment:
        ```json 
        {
          "coverage": "PCF system",
          "boundary": "Cradle-to-Gate"
          "providerName": "My Auditor",
          "completedAt": "2022-12-08T14:47:32Z"
          "standardName": "ISO 14044"
        }
        ```
      type: object
      properties:
        coverage:
          description: |
            Level of granularity of the emissions data assured, with value equal to
            - `corporate level` for corporate level
            - `product line` for product line
            - `PCF system` for PCF System
            - `product level` for product level

            This property MAY be undefined only if the kind of verification was not performed.
          summary: |
            Level of granularity of the emissions data assured
          type: string
          note: changed from v2.x
          enum:
            - PCF calculation model
            - PCF program
            - product level
        providerName:
          description: |
            The non-empty name of the independent third party engaged to undertake the verification.
          note: optional in version 3.0 was mandatory in 2.x
          type: string
        completedAt:
          description: |
            The date at which the verification was completed
          type: string
          format: date-time
        standardName:
          description: |
            Name of the standard against which the PCF was assured
          type: string
        comments:
          description: |
            Any additional comments that will clarify the interpretation of the verification.
          type: string

    FilterCriteria:
      title: FilterCriteria
      type: object
      description: |
        Criteria for filtering ProductFootprint requests.
      properties:
        productId: 
          $ref: '#/components/parameters/productId'
          type: array
          item: 
            $ref: '#/components/schemas/URN'
        companyId:
          $ref: '#/components/parameters/companyId'
          type: array
          item: 
            $ref: '#/components/schemas/URN'
        geography:
          $ref: '#/components/parameters/geography'
          type: array
          item: string
        classification:
          $ref: '#/components/parameters/classification'
          type: array
          item: 
            $ref: '#/components/schemas/URN'
        validOn:
          $ref: '#/components/parameters/validOn'
          type: string
          format: date-time
        validAfter:
          $ref: '#/components/parameters/validAfter'
          type: string
          format: date-time
        validBefore:
          $ref: '#/components/parameters/validBefore'
          type: string
          format: date-time
        status:       
          $ref: '#/components/parameters/status'
          type: string
          format: date-time
        comment:
          description: |
            Free text comment.
          type: string

    # -----------
    # Simple types
    NonEmptyString:
      type: string
      minLength: 1
    UUID:
      type: string
      format: uuid
      comment: '[RFC4122](https://tools.ietf.org/html/rfc4122)'
    Urn:
      type: string
      format: urn
      pattern: '^([uU][rR][nN]):'
    Uri:
      type: string
      format: uri
    Decimal:
      type: string
      format: decimal
      pattern: ^[+-]?\d+(\.\d+)?$
    PositiveNonZeroDecimal:
      type: string
      format: decimal
      pattern: ^[+]?(\d*[1-9]\d*)(\.\d+)?|(0+\.\d*[1-9]\d*)$
      comment: '> 0'
    PositiveOrZeroDecimal:
      type: string
      format: decimal
      pattern: ^[+]?\d+(\.\d+)?$
      comment: '>= 0'
    NegativeOrZeroDecimal:
      type: string
      format: decimal
      pattern: ^(-\d+(\.\d+)?)|0+(\.0+)?$
      comment: '<= 0'
    NegativeNonZeroDecimal:
      type: string
      format: decimal
      pattern: ^-((\d*[1-9]\d*)(\.\d+)?|(0+\.\d*[1-9]\d*))$
      comment: '< 0'

    # -----------
    # Events
    BaseEvent:
      description: |
        Base class for all events, it follows the CloudEvents specification.
      type: object
      required:
      - type
      - specversion
      - id
      - source
      - time
      - data
      properties:
        type:
          type: string
          description: Event type identifier.
        specversion:
          type: string
          description: CloudEvents version.
        id:
          type: string
          description: Event identifier. Must be able to uniquely identify the event by source and id.
        source:
          type: string
          description: The domain and endpoint of the application from which the event originates.
        time:
          type: string
          format: date-time
          description: The time the event occurred.
        data:
          type: object
          description: The event payload.

    PublishedEvent:
      $ref: '#/components/schemas/BaseEvent'
      title: ProductFootprint Published
      description: |
        Notification that a ProductFootprint has been published (either new or updated).
        This event is triggered by the [=data owner=] and send to relevant [=data recipients=].
      type: object
      examples:
      - | 
        ```http
        HTTP POST /events
        Content-Type: application/cloudevents+json

        {
          "type": "org.wbcsd.pathfinder.ProductFootprint.Published.v1",
          "specversion": "1.0",
          "id": "EventId",
          "source": "//EventHostname/EventSubpath",
          "time": "2022-05-31T17:31:00Z",
          "data": {
            "pfIds": ["079e425a-464f-528d-341d-4a944a1dfd70"]
          }
        }
        ```
      properties:
        $ref: '#/components/schemas/BaseEvent/properties'
        type:
          type: string
          const: org.wbcsd.pathfinder.ProductFootprint.Published.v1
          description: Event type identifier.
        data:
          type: object
          description: |
            Object containing the list of Product Footprint Ids that have been published or updated by the data owner.
            
            ```
            "data": { 
              "pfIds": [ "uuid1", "uuid2", ... ] 
            }
            ```
          properties:
            pfIds:
              type: array
              description: The list of Product Footprint Ids that have been published or updated by the data owner.
              items:
                type: string
                format: uuid
    
    RequestCreatedEvent:
      $ref: '#/components/schemas/BaseEvent'
      title: ProductFootprint Request Created
      description: A data recipient request the data owner a ProductFootprint.
      type: object
      properties:
        $ref: '#/components/schemas/BaseEvent/properties'
        type:
          type: string
          const: org.wbcsd.pathfinder.ProductFootprintRequest.Created.v1
          description: Event type identifier.
        data:
          type: object
          description: |
            Criteria for filtering ProductFootprint requests.
          properties:
            productId: 
              $ref: '#/components/parameters/productId'
              type: array
              items: 
                $ref: '#/components/schemas/Urn'
            companyId:
              $ref: '#/components/parameters/companyId'
              type: array
              items: 
                $ref: '#/components/schemas/Urn'
            geography:
              $ref: '#/components/parameters/geography'
              type: array
              items:
                $ref: '#/components/schemas/NonEmptyString'
            classification:
              $ref: '#/components/parameters/classification'
              type: array
              items: 
                $ref: '#/components/schemas/Urn'
            validOn:
              $ref: '#/components/parameters/validOn'
              type: string
              format: date-time
            validAfter:
              $ref: '#/components/parameters/validAfter'
              type: string
              format: date-time
            validBefore:
              $ref: '#/components/parameters/validBefore'
              type: string
              format: date-time
            status:       
              $ref: '#/components/parameters/status'
              type: string
              format: date-time
            comment:
              description: |
                Free text comment.
              type: string
          
    RequestFulfilledEvent:
      $ref: '#/components/schemas/BaseEvent'
      title: ProductFootprint Request Fulfilled
      description: Notification that a ProductFootprint request has been fulfilled.
      type: object
      properties:
        $ref: '#/components/schemas/BaseEvent/properties'
        type:
          type: string
          const: org.wbcsd.pathfinder.ProductFootprintRequest.Fulfilled.v1
          description: Event type identifier.
        data:
          type: object
          description: data object
          required:
            - requestEventId
            - pfs
          properties:
            requestEventId:
              description: The ID of the request event that has been fulfilled.
              type: string
            pfs:
              description: The list of ProductFootprints that have been returned.
              type: array
              items:
                $ref: '#/components/schemas/ProductFootprint'

    RequestRejectedEvent:
      $ref: '#/components/schemas/BaseEvent'
      title: ProductFootprint Request Rejected
      description: Notification that a request for a ProductFootprint can not be fulfilled.
      type: object
      properties:
        $ref: '#/components/schemas/BaseEvent/properties'
        type:
          type: string
          const: org.wbcsd.pathfinder.ProductFootprintRequest.Rejected.v1
          description: Event type identifier.
        data:
          type: object
          description: data object
          required:
            - requestEventId
            - error
          properties:
            requestEventId:
              description: The ID of the request event that has been fulfilled.
              type: string
            error:
              $ref: '#/components/schemas/Error'
              
    # ---------------
    # Error Responses
    Error:
      title: Error
      description: Object with error code and description, to be returned by the API methods 
        in case of error. See Chapter "Error Handling" of the Tech Specs for more details.
      type: object
      properties:
        code:
          type: string
          description: Error code identifier.
          enum:
            - BadRequest # 400
            - AccessDenied # 403
            - TokenExpired # 401
            - NotFound # NoSuchFootprint
            - InternalError # 500
            - NotImplemented #501
        message:
          type: string
          description: Human readable error message.
      required:
      - code
      - message
    BadRequestResponse:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundResponse:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedResponse: # 401
      description: The request is not authorized, the access token is invalid or has expired. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TokenExpiredResponse: # 401
      description: Token expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenResponse:
      description: Access Denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplementedResponse:
      description: Not implemented.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalErrorResponse:
      description: Internal Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    BearerAuth:
      description: OAuth2 Client Credentials Grant (RFC6749 4.4)
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: '/auth/token'
          scopes:
            footprint:list: Ability to list footprints
            footprint:read: Ability to access individual footprints

  parameters:
    # -----------
    # Parameters
    productId:
      name: productId
      description: One or more product ID's. Will return all footprints which have a corresponding ID in their `productIds` attribute. Note that a footprint itself can also have multiple product IDs.
      in: query
      explode: true
      schema: 
        type: array
        item: 
          $ref: '#/components/schemas/URN'
    companyId:
      name: companyId
      description: One or more company ID's. Will return all footprints which have a corresponding ID in their `companyId` attribute.
      in: query
      schema: 
        type: array
        item: 
          $ref: '#/components/schemas/URN'
    geography:
      name: geography
      description: One or more geographic specifiers. Values specified can denote `geographyRegion` or `geographyCountry` or `geographyCountrySubdivision`. Will return all footprints within the specified geography(s)
      in: query
      schema:
        type: array
        item: 
          type: string
    classification:
      name: classification
      description: One or more product classifications. Will return all footprints with corresponding values in the `productClassifications` attribute. Note that a footprint itself can have multiple classifications.
      in: query
      schema:
        type: array
        item: 
          $ref: '#/components/schemas/URN'
    validOn:
      name: validOn
      description: |
        If present, MUST match all PCFs which where valid on the date specified: footprint.validityPeriodBegin <= validOn AND validFrom <= footprint.validityPeriodEnd
      in: query
      schema:
        type: string
        format: date-time
    validAfter:
      name: validAfter
      description: |
        if present, MUST match PCFs whith validAfter < footprint.validityPeriodBegin
      in: query
      schema:
        type: string
        format: date-time
    validBefore:
      name: validBefore
      description: |
        if present, MUST match PCFs whith validBefore > footprint.validityPeriodEnd
      in: query
      schema:
        type: string
        format: date-time
    status:
      name: status
      description: |
        if present, MUST be either be "Active" or "Deprecated"
      in: query
      schema:
        type: string
        enum:
          - Active
          - Deprecated

